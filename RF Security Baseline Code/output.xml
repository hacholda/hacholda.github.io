<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.7 on win32)" generated="20210502 10:05:36.631" rpa="false">
<suite id="s1" name="IS2 Robot Template CentOS-v2.0" source="C:\Users\hachol.d\PycharmProjects\Automation\IS2\IS2_Robot_Template_CentOS-v2.0.robot">
<kw name="Run Keyword" library="BuiltIn" type="setup">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>STARTJSON</arg>
</arguments>
<kw name="STARTJSON">
<kw name="Load JSON From File" library="JSONLibrary">
<doc>Load JSON from file.</doc>
<arguments>
<arg>${TEMPLATE_HOST}</arg>
</arguments>
<assign>
<var>${json_obj_HOST}</var>
</assign>
<msg timestamp="20210502 10:05:36.980" level="INFO">${json_obj_HOST} = {'Host_Detail': {'VERSION': '2.0  29DEC2020', 'HOSTNAME': 'DataBase Server1', 'IP-ADDRESS': '192.168.20.30', 'USER': 'root', 'PASSWORD': '123456'}}</msg>
<status status="PASS" starttime="20210502 10:05:36.979" endtime="20210502 10:05:36.980"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
</arguments>
<msg timestamp="20210502 10:05:36.981" level="INFO">${json_obj_HOST} = {'Host_Detail': {'VERSION': '2.0  29DEC2020', 'HOSTNAME': 'DataBase Server1', 'IP-ADDRESS': '192.168.20.30', 'USER': 'root', 'PASSWORD': '123456'}}</msg>
<status status="PASS" starttime="20210502 10:05:36.981" endtime="20210502 10:05:36.981"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
<arg>$.Host_Detail.IP-ADDRESS</arg>
</arguments>
<assign>
<var>${IP_Address}</var>
</assign>
<msg timestamp="20210502 10:05:37.000" level="INFO">${IP_Address} = ['192.168.20.30']</msg>
<status status="PASS" starttime="20210502 10:05:36.981" endtime="20210502 10:05:37.000"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
<arg>$.Host_Detail.USER</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210502 10:05:37.019" level="INFO">${user} = ['root']</msg>
<status status="PASS" starttime="20210502 10:05:37.001" endtime="20210502 10:05:37.019"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
<arg>$.Host_Detail.PASSWORD</arg>
</arguments>
<assign>
<var>${password}</var>
</assign>
<msg timestamp="20210502 10:05:37.038" level="INFO">${password} = ['123456']</msg>
<status status="PASS" starttime="20210502 10:05:37.020" endtime="20210502 10:05:37.038"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${IP_Address[0]}</arg>
<arg>delay[2]</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:37.039" endtime="20210502 10:05:37.039"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user[0]}</arg>
<arg>${password[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:37.039" level="INFO">Logging into '192.168.20.30:22' as 'root'.</msg>
<msg timestamp="20210502 10:05:38.819" level="INFO">Read output: ################################################################
#                                                              # 
#                   Authorized access only !!                  #
#   Access to this device is restricted to those individuals   #
#   with specific Permissions.  If you are not an authorized   #
#   user,  disconnect now. Any attempts to gain unauthorized   #
#   access will be prosecuted to the fullest extent of the law #
#                                                              #
################################################################




Last login: Sat May  1 22:26:52 2021
[root@localhost ~]#</msg>
<status status="PASS" starttime="20210502 10:05:37.039" endtime="20210502 10:05:38.820"></status>
</kw>
<status status="PASS" starttime="20210502 10:05:36.979" endtime="20210502 10:05:38.820"></status>
</kw>
<status status="PASS" starttime="20210502 10:05:36.979" endtime="20210502 10:05:38.820"></status>
</kw>
<test id="s1-t1" name="Automate_Select_CentOS_Template">
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rpm -q centos-release</arg>
</arguments>
<assign>
<var>${GET_VERSION}</var>
</assign>
<msg timestamp="20210502 10:05:38.823" level="INFO">Executing command 'rpm -q centos-release'.</msg>
<msg timestamp="20210502 10:05:38.991" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:38.991" level="INFO">${GET_VERSION} = centos-release-8.2-2.2004.0.1.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:38.822" endtime="20210502 10:05:38.991"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${GET_VERSION}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:38.991" endtime="20210502 10:05:38.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_VERSION}'=='${VER7}'</arg>
<arg>Set Variable</arg>
<arg>${TEMPLATE1_CENTOS7}</arg>
</arguments>
<assign>
<var>${TEMPLATE_FILE}</var>
</assign>
<msg timestamp="20210502 10:05:38.992" level="INFO">${TEMPLATE_FILE} = None</msg>
<status status="PASS" starttime="20210502 10:05:38.992" endtime="20210502 10:05:38.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_VERSION}'=='${VER8}'</arg>
<arg>Set Variable</arg>
<arg>${TEMPLATE2_CENTOS8}</arg>
</arguments>
<assign>
<var>${TEMPLATE_FILE}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPLATE2_CENTOS8}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:38.992" endtime="20210502 10:05:38.992"></status>
</kw>
<msg timestamp="20210502 10:05:38.992" level="INFO">${TEMPLATE_FILE} = C:/Users/hachol.d/PycharmProjects/Automation/IS2/IS2_JSON_Template_CentOS8_v2.0.json</msg>
<status status="PASS" starttime="20210502 10:05:38.992" endtime="20210502 10:05:38.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_VERSION}'=='${VER7}'</arg>
<arg>Set Variable</arg>
<arg>${HASH_TEMPLATE1_CENTOS7}</arg>
</arguments>
<assign>
<var>${HASH_VALUE_FILE}</var>
</assign>
<msg timestamp="20210502 10:05:38.993" level="INFO">${HASH_VALUE_FILE} = None</msg>
<status status="PASS" starttime="20210502 10:05:38.992" endtime="20210502 10:05:38.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_VERSION}'=='${VER8}'</arg>
<arg>Set Variable</arg>
<arg>${HASH_TEMPLATE2_CENTOS8}</arg>
</arguments>
<assign>
<var>${HASH_VALUE_FILE}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${HASH_TEMPLATE2_CENTOS8}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:38.993" endtime="20210502 10:05:38.993"></status>
</kw>
<msg timestamp="20210502 10:05:38.994" level="INFO">${HASH_VALUE_FILE} = C:/Users/hachol.d/PycharmProjects/Automation/IS2/IS2-Hash_Value_CentOS8.json</msg>
<status status="PASS" starttime="20210502 10:05:38.993" endtime="20210502 10:05:38.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TEMPLATE_FILE}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:38.994" endtime="20210502 10:05:38.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${HASH_VALUE_FILE}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:38.994" endtime="20210502 10:05:38.994"></status>
</kw>
<kw name="Load JSON From File" library="JSONLibrary">
<doc>Load JSON from file.</doc>
<arguments>
<arg>${TEMPLATE_FILE}</arg>
</arguments>
<assign>
<var>${json_obj}</var>
</assign>
<msg timestamp="20210502 10:05:38.996" level="INFO">${json_obj} = {'Host_Detail': {'JSON-Template-Name': ':CentOS-8_10FEB2021_Ver2.0:', 'IP-ADDRESS': ':192.168.20.30:', 'OS': ':CentOS 8:', 'USER': '//root', 'PASSWORD': '//123456'}, 'Email_Receiver': {'TAG': 'Email n...</msg>
<status status="PASS" starttime="20210502 10:05:38.994" endtime="20210502 10:05:38.996"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${json_obj}</arg>
</arguments>
<msg timestamp="20210502 10:05:38.996" level="INFO">${json_obj} = {'Host_Detail': {'JSON-Template-Name': ':CentOS-8_10FEB2021_Ver2.0:', 'IP-ADDRESS': ':192.168.20.30:', 'OS': ':CentOS 8:', 'USER': '//root', 'PASSWORD': '//123456'}, 'Email_Receiver': {'TAG': 'Email n...</msg>
<status status="PASS" starttime="20210502 10:05:38.996" endtime="20210502 10:05:38.996"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TEMPLATE_FILE}</arg>
</arguments>
<msg timestamp="20210502 10:05:38.997" level="INFO">${TEMPLATE_FILE} = C:/Users/hachol.d/PycharmProjects/Automation/IS2/IS2_JSON_Template_CentOS8_v2.0.json</msg>
<status status="PASS" starttime="20210502 10:05:38.997" endtime="20210502 10:05:38.997"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HASH_VALUE_FILE}</arg>
</arguments>
<msg timestamp="20210502 10:05:38.997" level="INFO">${HASH_VALUE_FILE} = C:/Users/hachol.d/PycharmProjects/Automation/IS2/IS2-Hash_Value_CentOS8.json</msg>
<status status="PASS" starttime="20210502 10:05:38.997" endtime="20210502 10:05:38.997"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
<arg>$.Host_Detail.HOSTNAME</arg>
</arguments>
<assign>
<var>${HOSTNAME}</var>
</assign>
<msg timestamp="20210502 10:05:39.015" level="INFO">${HOSTNAME} = ['DataBase Server1']</msg>
<status status="PASS" starttime="20210502 10:05:38.998" endtime="20210502 10:05:39.016"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj_HOST}</arg>
<arg>$.Host_Detail.IP-ADDRESS</arg>
</arguments>
<assign>
<var>${Host_IP_Address}</var>
</assign>
<msg timestamp="20210502 10:05:39.034" level="INFO">${Host_IP_Address} = ['192.168.20.30']</msg>
<status status="PASS" starttime="20210502 10:05:39.016" endtime="20210502 10:05:39.034"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Host_Detail.JSON-Template-Name</arg>
</arguments>
<assign>
<var>${JSON_TEMPLATE}</var>
</assign>
<msg timestamp="20210502 10:05:39.052" level="INFO">${JSON_TEMPLATE} = [':CentOS-8_10FEB2021_Ver2.0:']</msg>
<status status="PASS" starttime="20210502 10:05:39.034" endtime="20210502 10:05:39.052"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Host_Detail.OS</arg>
</arguments>
<assign>
<var>${JSON_OS}</var>
</assign>
<msg timestamp="20210502 10:05:39.070" level="INFO">${JSON_OS} = [':CentOS 8:']</msg>
<status status="PASS" starttime="20210502 10:05:39.053" endtime="20210502 10:05:39.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${SB_TEMPLATE}</arg>
<arg>${JSON_TEMPLATE[0]}</arg>
<arg>${SYSTEM-OS}</arg>
<arg>${JSON_OS[0]}</arg>
<arg>${TITLE-HOST}</arg>
<arg>${HOSTNAME[0]}</arg>
<arg>${TITLE-IP}</arg>
<arg>${Host_IP_Address[0]}</arg>
</arguments>
<assign>
<var>${DOCUMENT}</var>
</assign>
<msg timestamp="20210502 10:05:39.071" level="INFO">${DOCUMENT} = Security Baseline Template Version :CentOS-8_10FEB2021_Ver2.0: OS :CentOS 8: Hostname DataBase Server1 IP Address 192.168.20.30</msg>
<status status="PASS" starttime="20210502 10:05:39.070" endtime="20210502 10:05:39.071"></status>
</kw>
<kw name="Set Suite Documentation" library="BuiltIn">
<doc>Sets documentation for the current test suite.</doc>
<arguments>
<arg>${DOCUMENT}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.071" level="INFO">Set suite documentation to:
Security Baseline Template Version :CentOS-8_10FEB2021_Ver2.0: OS :CentOS 8: Hostname DataBase Server1 IP Address 192.168.20.30</msg>
<status status="PASS" starttime="20210502 10:05:39.071" endtime="20210502 10:05:39.071"></status>
</kw>
<status status="PASS" starttime="20210502 10:05:38.820" endtime="20210502 10:05:39.072" critical="yes"></status>
</test>
<test id="s1-t2" name="Integrity Proof">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${HASH_VALUE_FILE}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.072" endtime="20210502 10:05:39.072"></status>
</kw>
<kw name="Load JSON From File" library="JSONLibrary">
<doc>Load JSON from file.</doc>
<arguments>
<arg>${HASH_VALUE_FILE}</arg>
</arguments>
<assign>
<var>${hashfile}</var>
</assign>
<msg timestamp="20210502 10:05:39.074" level="INFO">${hashfile} = {'Version': '002 11DEC2020', 'IP-Address': '192.168.20.30', 'user': 'root', 'password': '123456', 'hash_sha-3': '19cce7b2717893e596f5c19973f2c465ac18ddf5cf45c88fc29f591b4b83d98d2fc8137a9b222fc0dd48e4a...</msg>
<status status="PASS" starttime="20210502 10:05:39.072" endtime="20210502 10:05:39.074"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${hashfile}</arg>
<arg>$.hash_sha-3</arg>
</arguments>
<assign>
<var>${hashvalue}</var>
</assign>
<msg timestamp="20210502 10:05:39.092" level="INFO">${hashvalue} = ['19cce7b2717893e596f5c19973f2c465ac18ddf5cf45c88fc29f591b4b83d98d2fc8137a9b222fc0dd48e4aeffac893ca79166f9fcdc87118ab795b4412ce97f']</msg>
<status status="PASS" starttime="20210502 10:05:39.074" endtime="20210502 10:05:39.092"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${hashvalue}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.092" endtime="20210502 10:05:39.092"></status>
</kw>
<kw name="Join Two Strings" library="!IS2-1-Python-HashFunction">
<arguments>
<arg>${TEMPLATE_FILE}</arg>
<arg>NONE</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210502 10:05:39.093" level="INFO">${result} = 19cce7b2717893e596f5c19973f2c465ac18ddf5cf45c88fc29f591b4b83d98d2fc8137a9b222fc0dd48e4aeffac893ca79166f9fcdc87118ab795b4412ce97f</msg>
<status status="PASS" starttime="20210502 10:05:39.092" endtime="20210502 10:05:39.093"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.093" endtime="20210502 10:05:39.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${hashvalue[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.094" endtime="20210502 10:05:39.094"></status>
</kw>
<tags>
<tag>Integrity Proof</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.072" endtime="20210502 10:05:39.094" critical="yes"></status>
</test>
<test id="s1-t3" name="BASElINE_1-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.113" level="INFO">${TAG} = ['(1-1-1) Ensure mounting of cramfs filesystems is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:39.094" endtime="20210502 10:05:39.113"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.132" level="INFO">${AUDIT} = ['lsmod | grep cramfs']</msg>
<status status="PASS" starttime="20210502 10:05:39.113" endtime="20210502 10:05:39.132"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.151" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.132" endtime="20210502 10:05:39.151"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.152" level="INFO">Set tag '(1-1-1) Ensure mounting of cramfs filesystems is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:39.151" endtime="20210502 10:05:39.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.152" level="INFO">Executing command 'lsmod | grep cramfs'.</msg>
<msg timestamp="20210502 10:05:39.176" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.176" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.152" endtime="20210502 10:05:39.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.176" endtime="20210502 10:05:39.176"></status>
</kw>
<tags>
<tag>(1-1-1) Ensure mounting of cramfs filesystems is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.094" endtime="20210502 10:05:39.176" critical="yes"></status>
</test>
<test id="s1-t4" name="BASElINE_1-1-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.195" level="INFO">${TAG} = ['(1-1-2) Ensure mounting of squashfs filesystems is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:39.177" endtime="20210502 10:05:39.195"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.215" level="INFO">${AUDIT} = ['lsmod | grep squashfs']</msg>
<status status="PASS" starttime="20210502 10:05:39.195" endtime="20210502 10:05:39.215"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.234" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.215" endtime="20210502 10:05:39.234"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.234" level="INFO">Set tag '(1-1-2) Ensure mounting of squashfs filesystems is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:39.234" endtime="20210502 10:05:39.234"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.235" level="INFO">Executing command 'lsmod | grep squashfs'.</msg>
<msg timestamp="20210502 10:05:39.259" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.259" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.234" endtime="20210502 10:05:39.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.259" endtime="20210502 10:05:39.260"></status>
</kw>
<tags>
<tag>(1-1-2) Ensure mounting of squashfs filesystems is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.177" endtime="20210502 10:05:39.260" critical="yes"></status>
</test>
<test id="s1-t5" name="BASElINE_1-1-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.279" level="INFO">${TAG} = ['(1-1-3) Ensure mounting of udf filesystems is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:39.261" endtime="20210502 10:05:39.279"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.297" level="INFO">${AUDIT} = ['lsmod | grep udf']</msg>
<status status="PASS" starttime="20210502 10:05:39.279" endtime="20210502 10:05:39.297"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.316" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.297" endtime="20210502 10:05:39.317"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.317" level="INFO">Set tag '(1-1-3) Ensure mounting of udf filesystems is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:39.317" endtime="20210502 10:05:39.317"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.318" level="INFO">Executing command 'lsmod | grep udf'.</msg>
<msg timestamp="20210502 10:05:39.342" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.342" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.317" endtime="20210502 10:05:39.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.342" endtime="20210502 10:05:39.342"></status>
</kw>
<tags>
<tag>(1-1-3) Ensure mounting of udf filesystems is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.260" endtime="20210502 10:05:39.343" critical="yes"></status>
</test>
<test id="s1-t6" name="BASElINE_1-1-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.362" level="INFO">${TAG} = ['(1-1-4) Ensure nodev option set on /tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.343" endtime="20210502 10:05:39.362"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.381" level="INFO">${AUDIT} = ["mount | grep -E '\\s/tmp\\s' | grep -v nodev"]</msg>
<status status="PASS" starttime="20210502 10:05:39.362" endtime="20210502 10:05:39.381"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.399" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.381" endtime="20210502 10:05:39.399"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.400" level="INFO">Set tag '(1-1-4) Ensure nodev option set on /tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.399" endtime="20210502 10:05:39.400"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.400" level="INFO">Executing command 'mount | grep -E '\s/tmp\s' | grep -v nodev'.</msg>
<msg timestamp="20210502 10:05:39.425" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.425" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.400" endtime="20210502 10:05:39.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.425" endtime="20210502 10:05:39.426"></status>
</kw>
<tags>
<tag>(1-1-4) Ensure nodev option set on /tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.343" endtime="20210502 10:05:39.426" critical="yes"></status>
</test>
<test id="s1-t7" name="BASElINE_1-1-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.445" level="INFO">${TAG} = ['(1-1-5) Ensure nosuid option set on /tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.426" endtime="20210502 10:05:39.445"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.464" level="INFO">${AUDIT} = ["mount | grep -E '\\s/tmp\\s' | grep -v nosuid"]</msg>
<status status="PASS" starttime="20210502 10:05:39.445" endtime="20210502 10:05:39.464"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.482" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.464" endtime="20210502 10:05:39.482"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.483" level="INFO">Set tag '(1-1-5) Ensure nosuid option set on /tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.482" endtime="20210502 10:05:39.483"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.483" level="INFO">Executing command 'mount | grep -E '\s/tmp\s' | grep -v nosuid'.</msg>
<msg timestamp="20210502 10:05:39.507" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.507" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.483" endtime="20210502 10:05:39.507"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.507" endtime="20210502 10:05:39.508"></status>
</kw>
<tags>
<tag>(1-1-5) Ensure nosuid option set on /tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.426" endtime="20210502 10:05:39.508" critical="yes"></status>
</test>
<test id="s1-t8" name="BASElINE_1-1-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.528" level="INFO">${TAG} = ['(1-1-6) Ensure noexec option set on /tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.509" endtime="20210502 10:05:39.528"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.547" level="INFO">${AUDIT} = ["mount | grep -E '\\s/tmp\\s' | grep -v noexec"]</msg>
<status status="PASS" starttime="20210502 10:05:39.528" endtime="20210502 10:05:39.547"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.566" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.547" endtime="20210502 10:05:39.566"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.566" level="INFO">Set tag '(1-1-6) Ensure noexec option set on /tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.566" endtime="20210502 10:05:39.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.566" level="INFO">Executing command 'mount | grep -E '\s/tmp\s' | grep -v noexec'.</msg>
<msg timestamp="20210502 10:05:39.591" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.591" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.566" endtime="20210502 10:05:39.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.591" endtime="20210502 10:05:39.592"></status>
</kw>
<tags>
<tag>(1-1-6) Ensure noexec option set on /tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.508" endtime="20210502 10:05:39.592" critical="yes"></status>
</test>
<test id="s1-t9" name="BASElINE_1-1-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.625" level="INFO">${TAG} = ['(1-1-7) Ensure nodev option set on /var/tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.592" endtime="20210502 10:05:39.625"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.651" level="INFO">${AUDIT} = ["mount | grep -E '\\s/var/tmp\\s' | grep -v nodev"]</msg>
<status status="PASS" starttime="20210502 10:05:39.625" endtime="20210502 10:05:39.651"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.671" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.651" endtime="20210502 10:05:39.671"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.672" level="INFO">Set tag '(1-1-7) Ensure nodev option set on /var/tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.672" endtime="20210502 10:05:39.672"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.672" level="INFO">Executing command 'mount | grep -E '\s/var/tmp\s' | grep -v nodev'.</msg>
<msg timestamp="20210502 10:05:39.696" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.696" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.672" endtime="20210502 10:05:39.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.697" endtime="20210502 10:05:39.697"></status>
</kw>
<tags>
<tag>(1-1-7) Ensure nodev option set on /var/tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.592" endtime="20210502 10:05:39.697" critical="yes"></status>
</test>
<test id="s1-t10" name="BASElINE_1-1-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.715" level="INFO">${TAG} = ['(1-1-8) Ensure nosuid option set on /var/tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.697" endtime="20210502 10:05:39.715"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.734" level="INFO">${AUDIT} = ["mount | grep -E '\\s/var/tmp\\s' | grep -v nosuid"]</msg>
<status status="PASS" starttime="20210502 10:05:39.715" endtime="20210502 10:05:39.734"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.754" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.734" endtime="20210502 10:05:39.754"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.754" level="INFO">Set tag '(1-1-8) Ensure nosuid option set on /var/tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.754" endtime="20210502 10:05:39.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.754" level="INFO">Executing command 'mount | grep -E '\s/var/tmp\s' | grep -v nosuid'.</msg>
<msg timestamp="20210502 10:05:39.778" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.778" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.754" endtime="20210502 10:05:39.778"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.778" endtime="20210502 10:05:39.779"></status>
</kw>
<tags>
<tag>(1-1-8) Ensure nosuid option set on /var/tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.697" endtime="20210502 10:05:39.779" critical="yes"></status>
</test>
<test id="s1-t11" name="BASElINE_1-1-9">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-9.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.797" level="INFO">${TAG} = ['(1-1-9) Ensure noexec option set on /var/tmp partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.779" endtime="20210502 10:05:39.797"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-9.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.817" level="INFO">${AUDIT} = ["mount | grep -E '\\s/var/tmp\\s' | grep -v noexec"]</msg>
<status status="PASS" starttime="20210502 10:05:39.797" endtime="20210502 10:05:39.817"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-9.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.836" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.817" endtime="20210502 10:05:39.836"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.836" level="INFO">Set tag '(1-1-9) Ensure noexec option set on /var/tmp partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.836" endtime="20210502 10:05:39.837"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.837" level="INFO">Executing command 'mount | grep -E '\s/var/tmp\s' | grep -v noexec'.</msg>
<msg timestamp="20210502 10:05:39.861" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.861" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.837" endtime="20210502 10:05:39.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.861" endtime="20210502 10:05:39.862"></status>
</kw>
<tags>
<tag>(1-1-9) Ensure noexec option set on /var/tmp partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.779" endtime="20210502 10:05:39.862" critical="yes"></status>
</test>
<test id="s1-t12" name="BASElINE_1-1-10">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-10.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.881" level="INFO">${TAG} = ['1-1-10 Ensure nodev option set on /home partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.863" endtime="20210502 10:05:39.881"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-10.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.899" level="INFO">${AUDIT} = ["mount | grep -E '\\s/home\\s' | grep -v nodev"]</msg>
<status status="PASS" starttime="20210502 10:05:39.881" endtime="20210502 10:05:39.899"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-10.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:39.920" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.899" endtime="20210502 10:05:39.920"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:39.921" level="INFO">Set tag '1-1-10 Ensure nodev option set on /home partition'.</msg>
<status status="PASS" starttime="20210502 10:05:39.920" endtime="20210502 10:05:39.921"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:39.921" level="INFO">Executing command 'mount | grep -E '\s/home\s' | grep -v nodev'.</msg>
<msg timestamp="20210502 10:05:39.945" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:39.945" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:39.921" endtime="20210502 10:05:39.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:39.945" endtime="20210502 10:05:39.945"></status>
</kw>
<tags>
<tag>1-1-10 Ensure nodev option set on /home partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.863" endtime="20210502 10:05:39.945" critical="yes"></status>
</test>
<test id="s1-t13" name="BASElINE_1-1-11">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-11.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:39.964" level="INFO">${TAG} = ['1-1-11 Ensure nodev option set on /dev/shm partition']</msg>
<status status="PASS" starttime="20210502 10:05:39.946" endtime="20210502 10:05:39.964"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-11.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:39.983" level="INFO">${AUDIT} = ["mount | grep -E '\\s/dev/shm\\s' | grep -v nodev"]</msg>
<status status="PASS" starttime="20210502 10:05:39.964" endtime="20210502 10:05:39.983"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-11.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.002" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:39.984" endtime="20210502 10:05:40.002"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.002" level="INFO">Set tag '1-1-11 Ensure nodev option set on /dev/shm partition'.</msg>
<status status="PASS" starttime="20210502 10:05:40.002" endtime="20210502 10:05:40.002"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.002" level="INFO">Executing command 'mount | grep -E '\s/dev/shm\s' | grep -v nodev'.</msg>
<msg timestamp="20210502 10:05:40.026" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:40.026" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:40.002" endtime="20210502 10:05:40.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.026" endtime="20210502 10:05:40.027"></status>
</kw>
<tags>
<tag>1-1-11 Ensure nodev option set on /dev/shm partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:39.946" endtime="20210502 10:05:40.027" critical="yes"></status>
</test>
<test id="s1-t14" name="BASElINE_1-1-12">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-12.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.046" level="INFO">${TAG} = ['1-1-12 Ensure nosuid option set on /dev/shm partition']</msg>
<status status="PASS" starttime="20210502 10:05:40.027" endtime="20210502 10:05:40.046"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-12.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.064" level="INFO">${AUDIT} = ["mount | grep -E '\\s/dev/shm\\s' | grep -v nosuid"]</msg>
<status status="PASS" starttime="20210502 10:05:40.047" endtime="20210502 10:05:40.064"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-12.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.084" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:40.064" endtime="20210502 10:05:40.084"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.085" level="INFO">Set tag '1-1-12 Ensure nosuid option set on /dev/shm partition'.</msg>
<status status="PASS" starttime="20210502 10:05:40.084" endtime="20210502 10:05:40.085"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.085" level="INFO">Executing command 'mount | grep -E '\s/dev/shm\s' | grep -v nosuid'.</msg>
<msg timestamp="20210502 10:05:40.108" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:40.108" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:40.085" endtime="20210502 10:05:40.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.108" endtime="20210502 10:05:40.109"></status>
</kw>
<tags>
<tag>1-1-12 Ensure nosuid option set on /dev/shm partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.027" endtime="20210502 10:05:40.109" critical="yes"></status>
</test>
<test id="s1-t15" name="BASElINE_1-1-13">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-13.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.128" level="INFO">${TAG} = ['1-1-13 Ensure noexec option set on /dev/shm partition']</msg>
<status status="PASS" starttime="20210502 10:05:40.110" endtime="20210502 10:05:40.128"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-13.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.147" level="INFO">${AUDIT} = ['mount | grep /home']</msg>
<status status="PASS" starttime="20210502 10:05:40.129" endtime="20210502 10:05:40.147"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-13.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.169" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:40.148" endtime="20210502 10:05:40.169"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.169" level="INFO">Set tag '1-1-13 Ensure noexec option set on /dev/shm partition'.</msg>
<status status="PASS" starttime="20210502 10:05:40.169" endtime="20210502 10:05:40.169"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.170" level="INFO">Executing command 'mount | grep /home'.</msg>
<msg timestamp="20210502 10:05:40.193" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:40.193" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:40.170" endtime="20210502 10:05:40.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.194" endtime="20210502 10:05:40.194"></status>
</kw>
<tags>
<tag>1-1-13 Ensure noexec option set on /dev/shm partition</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.109" endtime="20210502 10:05:40.194" critical="yes"></status>
</test>
<test id="s1-t16" name="BASElINE_1-1-14">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-14.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.213" level="INFO">${TAG} = ['1-1-14 Disable Automounting']</msg>
<status status="PASS" starttime="20210502 10:05:40.194" endtime="20210502 10:05:40.213"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-14.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.232" level="INFO">${AUDIT} = ['systemctl is-enabled autofs']</msg>
<status status="PASS" starttime="20210502 10:05:40.213" endtime="20210502 10:05:40.232"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-1-14.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.251" level="INFO">${RESULT} = ['disabled']</msg>
<status status="PASS" starttime="20210502 10:05:40.232" endtime="20210502 10:05:40.251"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.252" level="INFO">Set tag '1-1-14 Disable Automounting'.</msg>
<status status="PASS" starttime="20210502 10:05:40.251" endtime="20210502 10:05:40.252"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.253" level="INFO">Executing command 'systemctl is-enabled autofs'.</msg>
<msg timestamp="20210502 10:05:40.413" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:40.413" level="INFO">${output} = disabled</msg>
<status status="PASS" starttime="20210502 10:05:40.252" endtime="20210502 10:05:40.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.414" endtime="20210502 10:05:40.415"></status>
</kw>
<tags>
<tag>1-1-14 Disable Automounting</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.194" endtime="20210502 10:05:40.415" critical="yes"></status>
</test>
<test id="s1-t17" name="BASElINE_1-2-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.452" level="INFO">${TAG} = ['1-2-1 Ensure gpgcheck is globally activated']</msg>
<status status="PASS" starttime="20210502 10:05:40.417" endtime="20210502 10:05:40.452"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.470" level="INFO">${AUDIT} = ['grep ^gpgcheck /etc/yum.conf']</msg>
<status status="PASS" starttime="20210502 10:05:40.452" endtime="20210502 10:05:40.470"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.490" level="INFO">${RESULT} = ['gpgcheck=1']</msg>
<status status="PASS" starttime="20210502 10:05:40.470" endtime="20210502 10:05:40.490"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.490" level="INFO">Set tag '1-2-1 Ensure gpgcheck is globally activated'.</msg>
<status status="PASS" starttime="20210502 10:05:40.490" endtime="20210502 10:05:40.490"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.490" level="INFO">Executing command 'grep ^gpgcheck /etc/yum.conf'.</msg>
<msg timestamp="20210502 10:05:40.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:40.514" level="INFO">${output} = gpgcheck=1</msg>
<status status="PASS" starttime="20210502 10:05:40.490" endtime="20210502 10:05:40.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.514" endtime="20210502 10:05:40.515"></status>
</kw>
<tags>
<tag>1-2-1 Ensure gpgcheck is globally activated</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.416" endtime="20210502 10:05:40.515" critical="yes"></status>
</test>
<test id="s1-t18" name="BASElINE_1-2-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.535" level="INFO">${TAG} = ['1-2-2 Ensure package manager repositories are configured']</msg>
<status status="PASS" starttime="20210502 10:05:40.515" endtime="20210502 10:05:40.535"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.554" level="INFO">${AUDIT} = ['dnf repolist']</msg>
<status status="PASS" starttime="20210502 10:05:40.535" endtime="20210502 10:05:40.554"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-2-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.573" level="INFO">${RESULT} = ['CentOS-8']</msg>
<status status="PASS" starttime="20210502 10:05:40.554" endtime="20210502 10:05:40.573"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.574" level="INFO">Set tag '1-2-2 Ensure package manager repositories are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:40.573" endtime="20210502 10:05:40.574"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.574" level="INFO">Executing command 'dnf repolist'.</msg>
<msg timestamp="20210502 10:05:40.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:40.851" level="INFO">${output} = repo id                            repo name
AppStream                          CentOS-8 - AppStream
BaseOS                             CentOS-8 - Base
extras                             CentOS-8 - Ex...</msg>
<status status="PASS" starttime="20210502 10:05:40.574" endtime="20210502 10:05:40.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.851" endtime="20210502 10:05:40.852"></status>
</kw>
<tags>
<tag>1-2-2 Ensure package manager repositories are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.515" endtime="20210502 10:05:40.852" critical="yes"></status>
</test>
<test id="s1-t19" name="BASElINE_1-3-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-3-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:40.873" level="INFO">${TAG} = ['1-3-1 Ensure sudo is installed']</msg>
<status status="PASS" starttime="20210502 10:05:40.853" endtime="20210502 10:05:40.873"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-3-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:40.894" level="INFO">${AUDIT} = ['rpm -q sudo']</msg>
<status status="PASS" starttime="20210502 10:05:40.873" endtime="20210502 10:05:40.894"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-3-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:40.928" level="INFO">${RESULT} = ['sudo-1.8.29-5.el8.x86_64']</msg>
<status status="PASS" starttime="20210502 10:05:40.894" endtime="20210502 10:05:40.929"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:40.929" level="INFO">Set tag '1-3-1 Ensure sudo is installed'.</msg>
<status status="PASS" starttime="20210502 10:05:40.929" endtime="20210502 10:05:40.929"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:40.929" level="INFO">Executing command 'rpm -q sudo'.</msg>
<msg timestamp="20210502 10:05:40.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:40.985" level="INFO">${output} = sudo-1.8.29-5.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:40.929" endtime="20210502 10:05:40.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:40.985" endtime="20210502 10:05:40.986"></status>
</kw>
<tags>
<tag>1-3-1 Ensure sudo is installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.853" endtime="20210502 10:05:40.986" critical="yes"></status>
</test>
<test id="s1-t20" name="BASElINE_1-4-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.004" level="INFO">${TAG} = ['1-4-1 Ensure AIDE is installed']</msg>
<status status="PASS" starttime="20210502 10:05:40.986" endtime="20210502 10:05:41.004"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.022" level="INFO">${AUDIT} = ['rpm -q aide']</msg>
<status status="PASS" starttime="20210502 10:05:41.005" endtime="20210502 10:05:41.022"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.042" level="INFO">${RESULT} = ['aide-0.16-11.el8.x86_64']</msg>
<status status="PASS" starttime="20210502 10:05:41.022" endtime="20210502 10:05:41.042"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.042" level="INFO">Set tag '1-4-1 Ensure AIDE is installed'.</msg>
<status status="PASS" starttime="20210502 10:05:41.042" endtime="20210502 10:05:41.042"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.043" level="INFO">Executing command 'rpm -q aide'.</msg>
<msg timestamp="20210502 10:05:41.108" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.108" level="INFO">${output} = aide-0.16-11.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:41.043" endtime="20210502 10:05:41.108"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.108" endtime="20210502 10:05:41.109"></status>
</kw>
<tags>
<tag>1-4-1 Ensure AIDE is installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:40.986" endtime="20210502 10:05:41.109" critical="yes"></status>
</test>
<test id="s1-t21" name="BASElINE_1-4-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.127" level="INFO">${TAG} = ['1-4-2 Ensure filesystem integrity is regularly checked']</msg>
<status status="PASS" starttime="20210502 10:05:41.109" endtime="20210502 10:05:41.127"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.146" level="INFO">${AUDIT} = ['crontab -u root -l | grep aide']</msg>
<status status="PASS" starttime="20210502 10:05:41.128" endtime="20210502 10:05:41.146"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-4-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.163" level="INFO">${RESULT} = ['0 5 * * * /usr/sbin/aide --check']</msg>
<status status="PASS" starttime="20210502 10:05:41.146" endtime="20210502 10:05:41.163"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.164" level="INFO">Set tag '1-4-2 Ensure filesystem integrity is regularly checked'.</msg>
<status status="PASS" starttime="20210502 10:05:41.164" endtime="20210502 10:05:41.164"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.165" level="INFO">Executing command 'crontab -u root -l | grep aide'.</msg>
<msg timestamp="20210502 10:05:41.188" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.188" level="INFO">${output} = 0 5 * * * /usr/sbin/aide --check</msg>
<status status="PASS" starttime="20210502 10:05:41.164" endtime="20210502 10:05:41.188"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.188" endtime="20210502 10:05:41.189"></status>
</kw>
<tags>
<tag>1-4-2 Ensure filesystem integrity is regularly checked</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.109" endtime="20210502 10:05:41.189" critical="yes"></status>
</test>
<test id="s1-t22" name="BASElINE_1-5-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.209" level="INFO">${TAG} = ['1-5-1 Ensure permissions on bootloader config are configured']</msg>
<status status="PASS" starttime="20210502 10:05:41.189" endtime="20210502 10:05:41.209"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.227" level="INFO">${AUDIT} = ['stat /boot/grub2/grub.cfg']</msg>
<status status="PASS" starttime="20210502 10:05:41.209" endtime="20210502 10:05:41.227"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.246" level="INFO">${RESULT} = ['0600/']</msg>
<status status="PASS" starttime="20210502 10:05:41.228" endtime="20210502 10:05:41.246"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.247" level="INFO">Set tag '1-5-1 Ensure permissions on bootloader config are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:41.246" endtime="20210502 10:05:41.247"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.247" level="INFO">Executing command 'stat /boot/grub2/grub.cfg'.</msg>
<msg timestamp="20210502 10:05:41.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.281" level="INFO">${output} =   File: /boot/grub2/grub.cfg
  Size: 5049      	Blocks: 16         IO Block: 4096   regular file
Device: 801h/2049d	Inode: 307         Links: 1
Access: (0600/-rw-------)  Uid: (    0/    root)   Gid: ...</msg>
<status status="PASS" starttime="20210502 10:05:41.247" endtime="20210502 10:05:41.281"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.281" endtime="20210502 10:05:41.282"></status>
</kw>
<tags>
<tag>1-5-1 Ensure permissions on bootloader config are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.189" endtime="20210502 10:05:41.282" critical="yes"></status>
</test>
<test id="s1-t23" name="BASElINE_1-5-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.301" level="INFO">${TAG} = ['1-5-2 Ensure bootloader password is set']</msg>
<status status="PASS" starttime="20210502 10:05:41.283" endtime="20210502 10:05:41.301"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.321" level="INFO">${AUDIT} = ['grep "^\\s*GRUB2_PASSWORD" /boot/grub2/user.cfg']</msg>
<status status="PASS" starttime="20210502 10:05:41.301" endtime="20210502 10:05:41.321"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.342" level="INFO">${RESULT} = ['GRUB2_PASSWORD=']</msg>
<status status="PASS" starttime="20210502 10:05:41.321" endtime="20210502 10:05:41.342"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.343" level="INFO">Set tag '1-5-2 Ensure bootloader password is set'.</msg>
<status status="PASS" starttime="20210502 10:05:41.342" endtime="20210502 10:05:41.343"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.343" level="INFO">Executing command 'grep "^\s*GRUB2_PASSWORD" /boot/grub2/user.cfg'.</msg>
<msg timestamp="20210502 10:05:41.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.366" level="INFO">${output} = GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.CCDCF870FD7EC72602C5CCF2EDADAD2531801943CC11896FD7CB79A05913D404480CC3BBE3229367E39F1038FD14EE3A704F7AFD60C97105A9753484E7D1D84B.4F485FA5E2A325AB83398A4E4C98464...</msg>
<status status="PASS" starttime="20210502 10:05:41.343" endtime="20210502 10:05:41.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.366" endtime="20210502 10:05:41.367"></status>
</kw>
<tags>
<tag>1-5-2 Ensure bootloader password is set</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.282" endtime="20210502 10:05:41.367" critical="yes"></status>
</test>
<test id="s1-t24" name="BASElINE_1-5-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.386" level="INFO">${TAG} = ['1-5-3 Ensure authentication required for single user mode']</msg>
<status status="PASS" starttime="20210502 10:05:41.367" endtime="20210502 10:05:41.386"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.404" level="INFO">${AUDIT} = ['grep /systemd-sulogin-shell /usr/lib/systemd/system/rescue.service']</msg>
<status status="PASS" starttime="20210502 10:05:41.386" endtime="20210502 10:05:41.404"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-5-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.424" level="INFO">${RESULT} = ['ExecStart=']</msg>
<status status="PASS" starttime="20210502 10:05:41.404" endtime="20210502 10:05:41.424"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.424" level="INFO">Set tag '1-5-3 Ensure authentication required for single user mode'.</msg>
<status status="PASS" starttime="20210502 10:05:41.424" endtime="20210502 10:05:41.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.425" level="INFO">Executing command 'grep /systemd-sulogin-shell /usr/lib/systemd/system/rescue.service'.</msg>
<msg timestamp="20210502 10:05:41.438" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.438" level="INFO">${output} = ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue</msg>
<status status="PASS" starttime="20210502 10:05:41.425" endtime="20210502 10:05:41.438"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.438" endtime="20210502 10:05:41.439"></status>
</kw>
<tags>
<tag>1-5-3 Ensure authentication required for single user mode</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.367" endtime="20210502 10:05:41.439" critical="yes"></status>
</test>
<test id="s1-t25" name="BASElINE_1-6-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.458" level="INFO">${TAG} = ['1-6-1 Ensure core dumps are restricted']</msg>
<status status="PASS" starttime="20210502 10:05:41.439" endtime="20210502 10:05:41.458"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.476" level="INFO">${AUDIT} = ['sysctl fs.suid_dumpable']</msg>
<status status="PASS" starttime="20210502 10:05:41.458" endtime="20210502 10:05:41.476"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.494" level="INFO">${RESULT} = ['fs.suid_dumpable = 0']</msg>
<status status="PASS" starttime="20210502 10:05:41.476" endtime="20210502 10:05:41.494"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.494" level="INFO">Set tag '1-6-1 Ensure core dumps are restricted'.</msg>
<status status="PASS" starttime="20210502 10:05:41.494" endtime="20210502 10:05:41.494"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.494" level="INFO">Executing command 'sysctl fs.suid_dumpable'.</msg>
<msg timestamp="20210502 10:05:41.518" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.518" level="INFO">${output} = fs.suid_dumpable = 0</msg>
<status status="PASS" starttime="20210502 10:05:41.494" endtime="20210502 10:05:41.518"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.518" endtime="20210502 10:05:41.519"></status>
</kw>
<tags>
<tag>1-6-1 Ensure core dumps are restricted</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.439" endtime="20210502 10:05:41.519" critical="yes"></status>
</test>
<test id="s1-t26" name="BASElINE_1-6-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.537" level="INFO">${TAG} = ['1-6-2 Ensure address space layout randomization (ASLR) is enabled']</msg>
<status status="PASS" starttime="20210502 10:05:41.519" endtime="20210502 10:05:41.537"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.556" level="INFO">${AUDIT} = ['sysctl kernel.randomize_va_space']</msg>
<status status="PASS" starttime="20210502 10:05:41.537" endtime="20210502 10:05:41.556"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-6-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.576" level="INFO">${RESULT} = ['kernel.randomize_va_space = 2']</msg>
<status status="PASS" starttime="20210502 10:05:41.556" endtime="20210502 10:05:41.576"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.577" level="INFO">Set tag '1-6-2 Ensure address space layout randomization (ASLR) is enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:41.576" endtime="20210502 10:05:41.577"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.577" level="INFO">Executing command 'sysctl kernel.randomize_va_space'.</msg>
<msg timestamp="20210502 10:05:41.591" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.591" level="INFO">${output} = kernel.randomize_va_space = 2</msg>
<status status="PASS" starttime="20210502 10:05:41.577" endtime="20210502 10:05:41.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.591" endtime="20210502 10:05:41.592"></status>
</kw>
<tags>
<tag>1-6-2 Ensure address space layout randomization (ASLR) is enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.519" endtime="20210502 10:05:41.592" critical="yes"></status>
</test>
<test id="s1-t27" name="BASElINE_1-7-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.612" level="INFO">${TAG} = ['1-7-1 Ensure SELinux is installed']</msg>
<status status="PASS" starttime="20210502 10:05:41.593" endtime="20210502 10:05:41.612"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.632" level="INFO">${AUDIT} = ['rpm -q libselinux']</msg>
<status status="PASS" starttime="20210502 10:05:41.612" endtime="20210502 10:05:41.632"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.651" level="INFO">${RESULT} = ['libselinux-2.9-3.el8.x86_64']</msg>
<status status="PASS" starttime="20210502 10:05:41.632" endtime="20210502 10:05:41.651"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.651" level="INFO">Set tag '1-7-1 Ensure SELinux is installed'.</msg>
<status status="PASS" starttime="20210502 10:05:41.651" endtime="20210502 10:05:41.651"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.652" level="INFO">Executing command 'rpm -q libselinux'.</msg>
<msg timestamp="20210502 10:05:41.729" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.729" level="INFO">${output} = libselinux-2.9-3.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:41.651" endtime="20210502 10:05:41.729"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.729" endtime="20210502 10:05:41.729"></status>
</kw>
<tags>
<tag>1-7-1 Ensure SELinux is installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.592" endtime="20210502 10:05:41.729" critical="yes"></status>
</test>
<test id="s1-t28" name="BASElINE_1-7-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.749" level="INFO">${TAG} = ['1-7-2 Ensure SELinux policy is configured']</msg>
<status status="PASS" starttime="20210502 10:05:41.730" endtime="20210502 10:05:41.749"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.767" level="INFO">${AUDIT} = ["grep -E '^\\s*SELINUXTYPE=(targeted|mls)\\b' /etc/selinux/config"]</msg>
<status status="PASS" starttime="20210502 10:05:41.749" endtime="20210502 10:05:41.767"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.786" level="INFO">${RESULT} = ['SELINUXTYPE=targeted']</msg>
<status status="PASS" starttime="20210502 10:05:41.768" endtime="20210502 10:05:41.786"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.786" level="INFO">Set tag '1-7-2 Ensure SELinux policy is configured'.</msg>
<status status="PASS" starttime="20210502 10:05:41.786" endtime="20210502 10:05:41.786"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.787" level="INFO">Executing command 'grep -E '^\s*SELINUXTYPE=(targeted|mls)\b' /etc/selinux/config'.</msg>
<msg timestamp="20210502 10:05:41.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.801" level="INFO">${output} = SELINUXTYPE=targeted</msg>
<status status="PASS" starttime="20210502 10:05:41.787" endtime="20210502 10:05:41.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.801" endtime="20210502 10:05:41.801"></status>
</kw>
<tags>
<tag>1-7-2 Ensure SELinux policy is configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.730" endtime="20210502 10:05:41.801" critical="yes"></status>
</test>
<test id="s1-t29" name="BASElINE_1-7-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.821" level="INFO">${TAG} = ['1-7-3 Ensure the SELinux state is enforcing']</msg>
<status status="PASS" starttime="20210502 10:05:41.802" endtime="20210502 10:05:41.821"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.839" level="INFO">${AUDIT} = ["grep -E '^\\s*SELINUX=enforcing' /etc/selinux/config"]</msg>
<status status="PASS" starttime="20210502 10:05:41.821" endtime="20210502 10:05:41.839"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.858" level="INFO">${RESULT} = ['SELINUX=enforcing']</msg>
<status status="PASS" starttime="20210502 10:05:41.840" endtime="20210502 10:05:41.858"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.858" level="INFO">Set tag '1-7-3 Ensure the SELinux state is enforcing'.</msg>
<status status="PASS" starttime="20210502 10:05:41.858" endtime="20210502 10:05:41.859"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.859" level="INFO">Executing command 'grep -E '^\s*SELINUX=enforcing' /etc/selinux/config'.</msg>
<msg timestamp="20210502 10:05:41.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:41.872" level="INFO">${output} = SELINUX=enforcing</msg>
<status status="PASS" starttime="20210502 10:05:41.859" endtime="20210502 10:05:41.872"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.873" endtime="20210502 10:05:41.873"></status>
</kw>
<tags>
<tag>1-7-3 Ensure the SELinux state is enforcing</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.802" endtime="20210502 10:05:41.873" critical="yes"></status>
</test>
<test id="s1-t30" name="BASElINE_1-7-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.893" level="INFO">${TAG} = ['1-7-4 Ensure SETroubleshoot is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:41.873" endtime="20210502 10:05:41.893"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:41.912" level="INFO">${AUDIT} = ['rpm -q setroubleshoot']</msg>
<status status="PASS" starttime="20210502 10:05:41.893" endtime="20210502 10:05:41.912"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:41.945" level="INFO">${RESULT} = ['package setroubleshoot is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:41.912" endtime="20210502 10:05:41.945"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:41.946" level="INFO">Set tag '1-7-4 Ensure SETroubleshoot is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:41.946" endtime="20210502 10:05:41.946"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:41.947" level="INFO">Executing command 'rpm -q setroubleshoot'.</msg>
<msg timestamp="20210502 10:05:41.970" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:41.970" level="INFO">${output} = package setroubleshoot is not installed</msg>
<status status="PASS" starttime="20210502 10:05:41.946" endtime="20210502 10:05:41.970"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:41.970" endtime="20210502 10:05:41.970"></status>
</kw>
<tags>
<tag>1-7-4 Ensure SETroubleshoot is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.873" endtime="20210502 10:05:41.970" critical="yes"></status>
</test>
<test id="s1-t31" name="BASElINE_1-7-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:41.989" level="INFO">${TAG} = ['1-7-5 Ensure the MCS Translation Service (mcstrans) is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:41.971" endtime="20210502 10:05:41.989"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.009" level="INFO">${AUDIT} = ['rpm -q mcstrans']</msg>
<status status="PASS" starttime="20210502 10:05:41.989" endtime="20210502 10:05:42.009"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-7-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.029" level="INFO">${RESULT} = ['package mcstrans is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:42.009" endtime="20210502 10:05:42.030"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.030" level="INFO">Set tag '1-7-5 Ensure the MCS Translation Service (mcstrans) is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:42.030" endtime="20210502 10:05:42.030"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.030" level="INFO">Executing command 'rpm -q mcstrans'.</msg>
<msg timestamp="20210502 10:05:42.054" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:42.054" level="INFO">${output} = package mcstrans is not installed</msg>
<status status="PASS" starttime="20210502 10:05:42.030" endtime="20210502 10:05:42.054"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.054" endtime="20210502 10:05:42.054"></status>
</kw>
<tags>
<tag>1-7-5 Ensure the MCS Translation Service (mcstrans) is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:41.971" endtime="20210502 10:05:42.054" critical="yes"></status>
</test>
<test id="s1-t32" name="BASElINE_1-8-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.073" level="INFO">${TAG} = ['1-8-1 Ensure message of the day is configured properly']</msg>
<status status="PASS" starttime="20210502 10:05:42.055" endtime="20210502 10:05:42.073"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.095" level="INFO">${AUDIT} = ['cat /etc/motd']</msg>
<status status="PASS" starttime="20210502 10:05:42.073" endtime="20210502 10:05:42.095"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.116" level="INFO">${RESULT} = ['Authorized access only']</msg>
<status status="PASS" starttime="20210502 10:05:42.095" endtime="20210502 10:05:42.116"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.117" level="INFO">Set tag '1-8-1 Ensure message of the day is configured properly'.</msg>
<status status="PASS" starttime="20210502 10:05:42.116" endtime="20210502 10:05:42.117"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.117" level="INFO">Executing command 'cat /etc/motd'.</msg>
<msg timestamp="20210502 10:05:42.131" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.131" level="INFO">${output} = ################################################################
#                                                              # 
#                   Authorized access only !!                  #
#   ...</msg>
<status status="PASS" starttime="20210502 10:05:42.117" endtime="20210502 10:05:42.131"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.132" endtime="20210502 10:05:42.132"></status>
</kw>
<tags>
<tag>1-8-1 Ensure message of the day is configured properly</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.055" endtime="20210502 10:05:42.132" critical="yes"></status>
</test>
<test id="s1-t33" name="BASElINE_1-8-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.153" level="INFO">${TAG} = ['1-8-2 Ensure local login warning banner is configured properly']</msg>
<status status="PASS" starttime="20210502 10:05:42.132" endtime="20210502 10:05:42.153"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.171" level="INFO">${AUDIT} = ['cat /etc/issue']</msg>
<status status="PASS" starttime="20210502 10:05:42.153" endtime="20210502 10:05:42.171"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.192" level="INFO">${RESULT} = ['may be monitored']</msg>
<status status="PASS" starttime="20210502 10:05:42.172" endtime="20210502 10:05:42.192"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.192" level="INFO">Set tag '1-8-2 Ensure local login warning banner is configured properly'.</msg>
<status status="PASS" starttime="20210502 10:05:42.192" endtime="20210502 10:05:42.192"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.192" level="INFO">Executing command 'cat /etc/issue'.</msg>
<msg timestamp="20210502 10:05:42.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.206" level="INFO">${output} = Authorized uses only. All activity may be monitored and reported.</msg>
<status status="PASS" starttime="20210502 10:05:42.192" endtime="20210502 10:05:42.206"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.206" endtime="20210502 10:05:42.206"></status>
</kw>
<tags>
<tag>1-8-2 Ensure local login warning banner is configured properly</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.132" endtime="20210502 10:05:42.206" critical="yes"></status>
</test>
<test id="s1-t34" name="BASElINE_1-8-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.225" level="INFO">${TAG} = ['1-8-3 Ensure permissions on /etc/motd are configured']</msg>
<status status="PASS" starttime="20210502 10:05:42.207" endtime="20210502 10:05:42.225"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.243" level="INFO">${AUDIT} = ['stat /etc/motd']</msg>
<status status="PASS" starttime="20210502 10:05:42.225" endtime="20210502 10:05:42.243"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.263" level="INFO">${RESULT} = ['0644']</msg>
<status status="PASS" starttime="20210502 10:05:42.243" endtime="20210502 10:05:42.263"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.264" level="INFO">Set tag '1-8-3 Ensure permissions on /etc/motd are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:42.264" endtime="20210502 10:05:42.264"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.264" level="INFO">Executing command 'stat /etc/motd'.</msg>
<msg timestamp="20210502 10:05:42.288" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.288" level="INFO">${output} =   File: /etc/motd
  Size: 590       	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16788108    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/  ...</msg>
<status status="PASS" starttime="20210502 10:05:42.264" endtime="20210502 10:05:42.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.288" endtime="20210502 10:05:42.289"></status>
</kw>
<tags>
<tag>1-8-3 Ensure permissions on /etc/motd are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.206" endtime="20210502 10:05:42.289" critical="yes"></status>
</test>
<test id="s1-t35" name="BASElINE_1-8-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.308" level="INFO">${TAG} = ['1-8-4 Ensure permissions on /etc/issue are configured']</msg>
<status status="PASS" starttime="20210502 10:05:42.290" endtime="20210502 10:05:42.308"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.328" level="INFO">${AUDIT} = ['stat /etc/issue']</msg>
<status status="PASS" starttime="20210502 10:05:42.309" endtime="20210502 10:05:42.328"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.347" level="INFO">${RESULT} = ['0644']</msg>
<status status="PASS" starttime="20210502 10:05:42.328" endtime="20210502 10:05:42.347"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.347" level="INFO">Set tag '1-8-4 Ensure permissions on /etc/issue are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:42.347" endtime="20210502 10:05:42.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.348" level="INFO">Executing command 'stat /etc/issue'.</msg>
<msg timestamp="20210502 10:05:42.372" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.372" level="INFO">${output} =   File: /etc/issue
  Size: 66        	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16786830    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/ ...</msg>
<status status="PASS" starttime="20210502 10:05:42.347" endtime="20210502 10:05:42.372"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.372" endtime="20210502 10:05:42.372"></status>
</kw>
<tags>
<tag>1-8-4 Ensure permissions on /etc/issue are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.289" endtime="20210502 10:05:42.372" critical="yes"></status>
</test>
<test id="s1-t36" name="BASElINE_1-8-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.391" level="INFO">${TAG} = ['1-8-5 Ensure permissions on /etc/issue.net are configured']</msg>
<status status="PASS" starttime="20210502 10:05:42.373" endtime="20210502 10:05:42.391"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.411" level="INFO">${AUDIT} = ['stat /etc/issue.net']</msg>
<status status="PASS" starttime="20210502 10:05:42.391" endtime="20210502 10:05:42.411"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.430" level="INFO">${RESULT} = ['0644']</msg>
<status status="PASS" starttime="20210502 10:05:42.411" endtime="20210502 10:05:42.430"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.431" level="INFO">Set tag '1-8-5 Ensure permissions on /etc/issue.net are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:42.430" endtime="20210502 10:05:42.431"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.431" level="INFO">Executing command 'stat /etc/issue.net'.</msg>
<msg timestamp="20210502 10:05:42.455" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.455" level="INFO">${output} =   File: /etc/issue.net
  Size: 590       	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16788218    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (   ...</msg>
<status status="PASS" starttime="20210502 10:05:42.431" endtime="20210502 10:05:42.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.456" endtime="20210502 10:05:42.456"></status>
</kw>
<tags>
<tag>1-8-5 Ensure permissions on /etc/issue.net are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.373" endtime="20210502 10:05:42.456" critical="yes"></status>
</test>
<test id="s1-t37" name="BASElINE_1-8-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.475" level="INFO">${TAG} = ['1-8-6 Ensure system-wide crypto policy is FUTURE or FIPS']</msg>
<status status="PASS" starttime="20210502 10:05:42.456" endtime="20210502 10:05:42.475"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.495" level="INFO">${AUDIT} = ["grep -E -i '^\\s*(FUTURE|FIPS)\\s*(\\s+#.*)?$' /etc/crypto-policies/config"]</msg>
<status status="PASS" starttime="20210502 10:05:42.475" endtime="20210502 10:05:42.495"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_1-8-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.514" level="INFO">${RESULT} = ['FUTURE']</msg>
<status status="PASS" starttime="20210502 10:05:42.495" endtime="20210502 10:05:42.514"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.514" level="INFO">Set tag '1-8-6 Ensure system-wide crypto policy is FUTURE or FIPS'.</msg>
<status status="PASS" starttime="20210502 10:05:42.514" endtime="20210502 10:05:42.514"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.514" level="INFO">Executing command 'grep -E -i '^\s*(FUTURE|FIPS)\s*(\s+#.*)?$' /etc/crypto-policies/config'.</msg>
<msg timestamp="20210502 10:05:42.559" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.559" level="INFO">${output} = FUTURE</msg>
<status status="PASS" starttime="20210502 10:05:42.514" endtime="20210502 10:05:42.559"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.559" endtime="20210502 10:05:42.560"></status>
</kw>
<tags>
<tag>1-8-6 Ensure system-wide crypto policy is FUTURE or FIPS</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.456" endtime="20210502 10:05:42.560" critical="yes"></status>
</test>
<test id="s1-t38" name="BASElINE_2-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.586" level="INFO">${TAG} = ['2-1-1 Ensure xinetd is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:42.561" endtime="20210502 10:05:42.586"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.606" level="INFO">${AUDIT} = ['rpm -q xinetd']</msg>
<status status="PASS" starttime="20210502 10:05:42.586" endtime="20210502 10:05:42.606"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.626" level="INFO">${RESULT} = ['package xinetd is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:42.606" endtime="20210502 10:05:42.626"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.626" level="INFO">Set tag '2-1-1 Ensure xinetd is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:42.626" endtime="20210502 10:05:42.626"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.626" level="INFO">Executing command 'rpm -q xinetd'.</msg>
<msg timestamp="20210502 10:05:42.650" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:42.650" level="INFO">${output} = package xinetd is not installed</msg>
<status status="PASS" starttime="20210502 10:05:42.626" endtime="20210502 10:05:42.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.650" endtime="20210502 10:05:42.651"></status>
</kw>
<tags>
<tag>2-1-1 Ensure xinetd is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.560" endtime="20210502 10:05:42.651" critical="yes"></status>
</test>
<test id="s1-t39" name="BASElINE_2-2-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.670" level="INFO">${TAG} = ['2-2-1 Ensure time synchronization is in use']</msg>
<status status="PASS" starttime="20210502 10:05:42.651" endtime="20210502 10:05:42.670"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.690" level="INFO">${AUDIT} = ['rpm -q chrony']</msg>
<status status="PASS" starttime="20210502 10:05:42.670" endtime="20210502 10:05:42.690"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.710" level="INFO">${RESULT} = ['chrony-3.5-1.el8.x86_64']</msg>
<status status="PASS" starttime="20210502 10:05:42.690" endtime="20210502 10:05:42.710"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.711" level="INFO">Set tag '2-2-1 Ensure time synchronization is in use'.</msg>
<status status="PASS" starttime="20210502 10:05:42.711" endtime="20210502 10:05:42.711"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.712" level="INFO">Executing command 'rpm -q chrony'.</msg>
<msg timestamp="20210502 10:05:42.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.756" level="INFO">${output} = chrony-3.5-1.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:42.711" endtime="20210502 10:05:42.756"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.756" endtime="20210502 10:05:42.757"></status>
</kw>
<tags>
<tag>2-2-1 Ensure time synchronization is in use</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.651" endtime="20210502 10:05:42.757" critical="yes"></status>
</test>
<test id="s1-t40" name="BASElINE_2-2-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.776" level="INFO">${TAG} = ['2-2-2 Ensure chrony is configured']</msg>
<status status="PASS" starttime="20210502 10:05:42.757" endtime="20210502 10:05:42.776"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.795" level="INFO">${AUDIT} = ['grep -E "^(server|pool)" /etc/chrony.conf']</msg>
<status status="PASS" starttime="20210502 10:05:42.776" endtime="20210502 10:05:42.795"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.815" level="INFO">${RESULT} = ['ntp.org']</msg>
<status status="PASS" starttime="20210502 10:05:42.795" endtime="20210502 10:05:42.815"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.815" level="INFO">Set tag '2-2-2 Ensure chrony is configured'.</msg>
<status status="PASS" starttime="20210502 10:05:42.815" endtime="20210502 10:05:42.815"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.816" level="INFO">Executing command 'grep -E "^(server|pool)" /etc/chrony.conf'.</msg>
<msg timestamp="20210502 10:05:42.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:42.829" level="INFO">${output} = pool 2.centos.pool.ntp.org iburst</msg>
<status status="PASS" starttime="20210502 10:05:42.815" endtime="20210502 10:05:42.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.829" endtime="20210502 10:05:42.830"></status>
</kw>
<tags>
<tag>2-2-2 Ensure chrony is configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.757" endtime="20210502 10:05:42.830" critical="yes"></status>
</test>
<test id="s1-t41" name="BASElINE_2-2-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.850" level="INFO">${TAG} = ['2-2-3 Ensure rsync service is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:42.831" endtime="20210502 10:05:42.850"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.870" level="INFO">${AUDIT} = ['systemctl is-enabled rsyncd']</msg>
<status status="PASS" starttime="20210502 10:05:42.850" endtime="20210502 10:05:42.870"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.891" level="INFO">${RESULT} = ['enable']</msg>
<status status="PASS" starttime="20210502 10:05:42.870" endtime="20210502 10:05:42.891"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.891" level="INFO">Set tag '2-2-3 Ensure rsync service is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:42.891" endtime="20210502 10:05:42.891"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.892" level="INFO">Executing command 'systemctl is-enabled rsyncd'.</msg>
<msg timestamp="20210502 10:05:42.915" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:42.915" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:42.891" endtime="20210502 10:05:42.915"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:42.915" endtime="20210502 10:05:42.916"></status>
</kw>
<tags>
<tag>2-2-3 Ensure rsync service is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.831" endtime="20210502 10:05:42.916" critical="yes"></status>
</test>
<test id="s1-t42" name="BASElINE_2-2-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:42.950" level="INFO">${TAG} = ['2-2-4 Ensure Avahi Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:42.917" endtime="20210502 10:05:42.950"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:42.968" level="INFO">${AUDIT} = ['systemctl is-enabled avahi-daemon']</msg>
<status status="PASS" starttime="20210502 10:05:42.950" endtime="20210502 10:05:42.968"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:42.987" level="INFO">${RESULT} = ['disabled']</msg>
<status status="PASS" starttime="20210502 10:05:42.968" endtime="20210502 10:05:42.987"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:42.988" level="INFO">Set tag '2-2-4 Ensure Avahi Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:42.987" endtime="20210502 10:05:42.988"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:42.989" level="INFO">Executing command 'systemctl is-enabled avahi-daemon'.</msg>
<msg timestamp="20210502 10:05:43.023" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.023" level="INFO">${output} = disabled</msg>
<status status="PASS" starttime="20210502 10:05:42.988" endtime="20210502 10:05:43.023"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.023" endtime="20210502 10:05:43.023"></status>
</kw>
<tags>
<tag>2-2-4 Ensure Avahi Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:42.916" endtime="20210502 10:05:43.023" critical="yes"></status>
</test>
<test id="s1-t43" name="BASElINE_2-2-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.043" level="INFO">${TAG} = ['2-2-5 Ensure SNMP Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.024" endtime="20210502 10:05:43.043"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.061" level="INFO">${AUDIT} = ['systemctl is-enabled snmpd']</msg>
<status status="PASS" starttime="20210502 10:05:43.043" endtime="20210502 10:05:43.061"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.081" level="INFO">${RESULT} = ['enable']</msg>
<status status="PASS" starttime="20210502 10:05:43.061" endtime="20210502 10:05:43.081"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.082" level="INFO">Set tag '2-2-5 Ensure SNMP Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.081" endtime="20210502 10:05:43.082"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.082" level="INFO">Executing command 'systemctl is-enabled snmpd'.</msg>
<msg timestamp="20210502 10:05:43.106" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.106" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.082" endtime="20210502 10:05:43.106"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.106" endtime="20210502 10:05:43.107"></status>
</kw>
<tags>
<tag>2-2-5 Ensure SNMP Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.024" endtime="20210502 10:05:43.107" critical="yes"></status>
</test>
<test id="s1-t44" name="BASElINE_2-2-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.126" level="INFO">${TAG} = ['2-2-6 Ensure HTTP Proxy Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.107" endtime="20210502 10:05:43.126"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.145" level="INFO">${AUDIT} = ['systemctl is-enabled squid']</msg>
<status status="PASS" starttime="20210502 10:05:43.126" endtime="20210502 10:05:43.145"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.166" level="INFO">${RESULT} = ['enable']</msg>
<status status="PASS" starttime="20210502 10:05:43.146" endtime="20210502 10:05:43.166"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.166" level="INFO">Set tag '2-2-6 Ensure HTTP Proxy Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.166" endtime="20210502 10:05:43.166"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.167" level="INFO">Executing command 'systemctl is-enabled squid'.</msg>
<msg timestamp="20210502 10:05:43.191" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.191" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.166" endtime="20210502 10:05:43.191"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.191" endtime="20210502 10:05:43.191"></status>
</kw>
<tags>
<tag>2-2-6 Ensure HTTP Proxy Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.107" endtime="20210502 10:05:43.191" critical="yes"></status>
</test>
<test id="s1-t45" name="BASElINE_2-2-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.211" level="INFO">${TAG} = ['2-2-7 Ensure Samba is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.192" endtime="20210502 10:05:43.211"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.230" level="INFO">${AUDIT} = ['systemctl is-enabled smb']</msg>
<status status="PASS" starttime="20210502 10:05:43.211" endtime="20210502 10:05:43.230"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.252" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.230" endtime="20210502 10:05:43.252"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.252" level="INFO">Set tag '2-2-7 Ensure Samba is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.252" endtime="20210502 10:05:43.252"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.252" level="INFO">Executing command 'systemctl is-enabled smb'.</msg>
<msg timestamp="20210502 10:05:43.276" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.276" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.252" endtime="20210502 10:05:43.276"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.276" endtime="20210502 10:05:43.276"></status>
</kw>
<tags>
<tag>2-2-7 Ensure Samba is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.192" endtime="20210502 10:05:43.276" critical="yes"></status>
</test>
<test id="s1-t46" name="BASElINE_2-2-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.295" level="INFO">${TAG} = ['2-2-8 Ensure IMAP and POP3 server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.277" endtime="20210502 10:05:43.295"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.313" level="INFO">${AUDIT} = ['systemctl is-enabled dovecot']</msg>
<status status="PASS" starttime="20210502 10:05:43.295" endtime="20210502 10:05:43.313"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.330" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.313" endtime="20210502 10:05:43.331"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.331" level="INFO">Set tag '2-2-8 Ensure IMAP and POP3 server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.331" endtime="20210502 10:05:43.331"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.332" level="INFO">Executing command 'systemctl is-enabled dovecot'.</msg>
<msg timestamp="20210502 10:05:43.355" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.355" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.331" endtime="20210502 10:05:43.355"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.355" endtime="20210502 10:05:43.356"></status>
</kw>
<tags>
<tag>2-2-8 Ensure IMAP and POP3 server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.277" endtime="20210502 10:05:43.356" critical="yes"></status>
</test>
<test id="s1-t47" name="BASElINE_2-2-9">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-9.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.375" level="INFO">${TAG} = ['2-2-9 Ensure HTTP server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.357" endtime="20210502 10:05:43.375"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-9.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.393" level="INFO">${AUDIT} = ['systemctl is-enabled httpd']</msg>
<status status="PASS" starttime="20210502 10:05:43.375" endtime="20210502 10:05:43.393"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-9.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.415" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.393" endtime="20210502 10:05:43.415"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.416" level="INFO">Set tag '2-2-9 Ensure HTTP server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.415" endtime="20210502 10:05:43.416"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.416" level="INFO">Executing command 'systemctl is-enabled httpd'.</msg>
<msg timestamp="20210502 10:05:43.440" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.440" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.416" endtime="20210502 10:05:43.440"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.440" endtime="20210502 10:05:43.440"></status>
</kw>
<tags>
<tag>2-2-9 Ensure HTTP server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.356" endtime="20210502 10:05:43.440" critical="yes"></status>
</test>
<test id="s1-t48" name="BASElINE_2-2-10">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-10.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.460" level="INFO">${TAG} = ['2-2-10 Ensure FTP Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.441" endtime="20210502 10:05:43.460"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-10.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.479" level="INFO">${AUDIT} = ['systemctl is-enabled vsftpd']</msg>
<status status="PASS" starttime="20210502 10:05:43.460" endtime="20210502 10:05:43.479"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-10.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.497" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.479" endtime="20210502 10:05:43.497"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.498" level="INFO">Set tag '2-2-10 Ensure FTP Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.497" endtime="20210502 10:05:43.498"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.498" level="INFO">Executing command 'systemctl is-enabled vsftpd'.</msg>
<msg timestamp="20210502 10:05:43.522" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.522" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.498" endtime="20210502 10:05:43.522"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.522" endtime="20210502 10:05:43.522"></status>
</kw>
<tags>
<tag>2-2-10 Ensure FTP Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.441" endtime="20210502 10:05:43.522" critical="yes"></status>
</test>
<test id="s1-t49" name="BASElINE_2-2-11">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-11.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.543" level="INFO">${TAG} = ['2-2-11 Ensure DNS Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.523" endtime="20210502 10:05:43.543"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-11.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.562" level="INFO">${AUDIT} = ['systemctl is-enabled named']</msg>
<status status="PASS" starttime="20210502 10:05:43.543" endtime="20210502 10:05:43.562"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-11.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.582" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.562" endtime="20210502 10:05:43.582"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.582" level="INFO">Set tag '2-2-11 Ensure DNS Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.582" endtime="20210502 10:05:43.582"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.582" level="INFO">Executing command 'systemctl is-enabled named'.</msg>
<msg timestamp="20210502 10:05:43.607" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.607" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.582" endtime="20210502 10:05:43.607"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.607" endtime="20210502 10:05:43.607"></status>
</kw>
<tags>
<tag>2-2-11 Ensure DNS Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.523" endtime="20210502 10:05:43.607" critical="yes"></status>
</test>
<test id="s1-t50" name="BASElINE_2-2-12">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-12.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.627" level="INFO">${TAG} = ['2-2-12 Ensure NFS is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.608" endtime="20210502 10:05:43.627"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-12.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.645" level="INFO">${AUDIT} = ['systemctl is-enabled nfs']</msg>
<status status="PASS" starttime="20210502 10:05:43.627" endtime="20210502 10:05:43.645"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-12.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.665" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.645" endtime="20210502 10:05:43.665"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.666" level="INFO">Set tag '2-2-12 Ensure NFS is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.665" endtime="20210502 10:05:43.666"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.666" level="INFO">Executing command 'systemctl is-enabled nfs'.</msg>
<msg timestamp="20210502 10:05:43.689" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.689" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.666" endtime="20210502 10:05:43.689"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.689" endtime="20210502 10:05:43.689"></status>
</kw>
<tags>
<tag>2-2-12 Ensure NFS is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.607" endtime="20210502 10:05:43.689" critical="yes"></status>
</test>
<test id="s1-t51" name="BASElINE_2-2-13">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-13.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.711" level="INFO">${TAG} = ['2-2-13 Ensure RPC is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.690" endtime="20210502 10:05:43.711"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-13.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.728" level="INFO">${AUDIT} = ['systemctl is-enabled rpcbind']</msg>
<status status="PASS" starttime="20210502 10:05:43.711" endtime="20210502 10:05:43.728"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-13.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.748" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.728" endtime="20210502 10:05:43.748"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.749" level="INFO">Set tag '2-2-13 Ensure RPC is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.748" endtime="20210502 10:05:43.749"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.750" level="INFO">Executing command 'systemctl is-enabled rpcbind'.</msg>
<msg timestamp="20210502 10:05:43.773" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.773" level="INFO">${output} = disabled</msg>
<status status="PASS" starttime="20210502 10:05:43.749" endtime="20210502 10:05:43.773"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.773" endtime="20210502 10:05:43.774"></status>
</kw>
<tags>
<tag>2-2-13 Ensure RPC is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.689" endtime="20210502 10:05:43.774" critical="yes"></status>
</test>
<test id="s1-t52" name="BASElINE_2-2-14">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-14.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.793" level="INFO">${TAG} = ['2-2-14 Ensure LDAP server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.775" endtime="20210502 10:05:43.793"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-14.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.812" level="INFO">${AUDIT} = ['systemctl is-enabled slapd']</msg>
<status status="PASS" starttime="20210502 10:05:43.793" endtime="20210502 10:05:43.812"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-14.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.846" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.812" endtime="20210502 10:05:43.846"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.846" level="INFO">Set tag '2-2-14 Ensure LDAP server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.846" endtime="20210502 10:05:43.846"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.846" level="INFO">Executing command 'systemctl is-enabled slapd'.</msg>
<msg timestamp="20210502 10:05:43.870" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.870" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:43.846" endtime="20210502 10:05:43.870"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.871" endtime="20210502 10:05:43.871"></status>
</kw>
<tags>
<tag>2-2-14 Ensure LDAP server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.774" endtime="20210502 10:05:43.871" critical="yes"></status>
</test>
<test id="s1-t53" name="BASElINE_2-2-15">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-15.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.890" level="INFO">${TAG} = ['2-2-15 Ensure DHCP Server is not enabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.871" endtime="20210502 10:05:43.890"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-15.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:43.912" level="INFO">${AUDIT} = ['systemctl is-enabled dhcpd']</msg>
<status status="PASS" starttime="20210502 10:05:43.891" endtime="20210502 10:05:43.912"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-15.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:43.930" level="INFO">${RESULT} = ['disabled']</msg>
<status status="PASS" starttime="20210502 10:05:43.912" endtime="20210502 10:05:43.930"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:43.931" level="INFO">Set tag '2-2-15 Ensure DHCP Server is not enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:43.930" endtime="20210502 10:05:43.931"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:43.931" level="INFO">Executing command 'systemctl is-enabled dhcpd'.</msg>
<msg timestamp="20210502 10:05:43.965" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:43.965" level="INFO">${output} = disabled</msg>
<status status="PASS" starttime="20210502 10:05:43.931" endtime="20210502 10:05:43.965"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:43.965" endtime="20210502 10:05:43.966"></status>
</kw>
<tags>
<tag>2-2-15 Ensure DHCP Server is not enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.871" endtime="20210502 10:05:43.966" critical="yes"></status>
</test>
<test id="s1-t54" name="BASElINE_2-2-16">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-16.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:43.985" level="INFO">${TAG} = ['2-2-16 Ensure CUPS is not enabled (Scored)']</msg>
<status status="PASS" starttime="20210502 10:05:43.966" endtime="20210502 10:05:43.985"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-16.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.005" level="INFO">${AUDIT} = ['systemctl is-enabled cups']</msg>
<status status="PASS" starttime="20210502 10:05:43.985" endtime="20210502 10:05:44.005"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-16.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.024" level="INFO">${RESULT} = ['disabled']</msg>
<status status="PASS" starttime="20210502 10:05:44.005" endtime="20210502 10:05:44.025"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.025" level="INFO">Set tag '2-2-16 Ensure CUPS is not enabled (Scored)'.</msg>
<status status="PASS" starttime="20210502 10:05:44.025" endtime="20210502 10:05:44.025"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.025" level="INFO">Executing command 'systemctl is-enabled cups'.</msg>
<msg timestamp="20210502 10:05:44.080" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.080" level="INFO">${output} = disabled</msg>
<status status="PASS" starttime="20210502 10:05:44.025" endtime="20210502 10:05:44.080"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.081" endtime="20210502 10:05:44.081"></status>
</kw>
<tags>
<tag>2-2-16 Ensure CUPS is not enabled (Scored)</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:43.966" endtime="20210502 10:05:44.081" critical="yes"></status>
</test>
<test id="s1-t55" name="BASElINE_2-2-17">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-17.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.099" level="INFO">${TAG} = ['2-2-17 Ensure NIS Server is not enabled (Scored)']</msg>
<status status="PASS" starttime="20210502 10:05:44.082" endtime="20210502 10:05:44.099"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-17.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.119" level="INFO">${AUDIT} = ['systemctl is-enabled ypserv']</msg>
<status status="PASS" starttime="20210502 10:05:44.099" endtime="20210502 10:05:44.119"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-17.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.136" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:44.119" endtime="20210502 10:05:44.136"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.137" level="INFO">Set tag '2-2-17 Ensure NIS Server is not enabled (Scored)'.</msg>
<status status="PASS" starttime="20210502 10:05:44.136" endtime="20210502 10:05:44.137"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.137" level="INFO">Executing command 'systemctl is-enabled ypserv'.</msg>
<msg timestamp="20210502 10:05:44.161" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.161" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:44.137" endtime="20210502 10:05:44.161"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.161" endtime="20210502 10:05:44.162"></status>
</kw>
<tags>
<tag>2-2-17 Ensure NIS Server is not enabled (Scored)</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.082" endtime="20210502 10:05:44.162" critical="yes"></status>
</test>
<test id="s1-t56" name="BASElINE_2-2-18">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-18.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.181" level="INFO">${TAG} = ['2-2-18 Ensure mail transfer agent is configured for local-only mode']</msg>
<status status="PASS" starttime="20210502 10:05:44.163" endtime="20210502 10:05:44.181"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-18.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.199" level="INFO">${AUDIT} = ["ss -lntu | grep -E ':25\\s' | grep -E -v '\\s(127.0.0.1|::1):25\\s'"]</msg>
<status status="PASS" starttime="20210502 10:05:44.181" endtime="20210502 10:05:44.199"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-2-18.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.220" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:44.199" endtime="20210502 10:05:44.220"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.221" level="INFO">Set tag '2-2-18 Ensure mail transfer agent is configured for local-only mode'.</msg>
<status status="PASS" starttime="20210502 10:05:44.220" endtime="20210502 10:05:44.221"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.221" level="INFO">Executing command 'ss -lntu | grep -E ':25\s' | grep -E -v '\s(127.0.0.1|::1):25\s''.</msg>
<msg timestamp="20210502 10:05:44.287" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.287" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:44.221" endtime="20210502 10:05:44.287"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.287" endtime="20210502 10:05:44.287"></status>
</kw>
<tags>
<tag>2-2-18 Ensure mail transfer agent is configured for local-only mode</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.162" endtime="20210502 10:05:44.287" critical="yes"></status>
</test>
<test id="s1-t57" name="BASElINE_2-3-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.306" level="INFO">${TAG} = ['2-3-1 Ensure NIS Client is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.288" endtime="20210502 10:05:44.306"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.326" level="INFO">${AUDIT} = ['rpm -q ypbind']</msg>
<status status="PASS" starttime="20210502 10:05:44.306" endtime="20210502 10:05:44.326"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.344" level="INFO">${RESULT} = ['not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.326" endtime="20210502 10:05:44.344"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.345" level="INFO">Set tag '2-3-1 Ensure NIS Client is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:44.344" endtime="20210502 10:05:44.345"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.345" level="INFO">Executing command 'rpm -q ypbind'.</msg>
<msg timestamp="20210502 10:05:44.368" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.368" level="INFO">${output} = package ypbind is not installed</msg>
<status status="PASS" starttime="20210502 10:05:44.345" endtime="20210502 10:05:44.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.368" endtime="20210502 10:05:44.369"></status>
</kw>
<tags>
<tag>2-3-1 Ensure NIS Client is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.287" endtime="20210502 10:05:44.369" critical="yes"></status>
</test>
<test id="s1-t58" name="BASElINE_2-3-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.388" level="INFO">${TAG} = ['2-3-2 Ensure telnet client is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.369" endtime="20210502 10:05:44.388"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.406" level="INFO">${AUDIT} = ['rpm -q telnet']</msg>
<status status="PASS" starttime="20210502 10:05:44.388" endtime="20210502 10:05:44.406"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.424" level="INFO">${RESULT} = ['not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.407" endtime="20210502 10:05:44.425"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.425" level="INFO">Set tag '2-3-2 Ensure telnet client is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:44.425" endtime="20210502 10:05:44.425"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.425" level="INFO">Executing command 'rpm -q telnet'.</msg>
<msg timestamp="20210502 10:05:44.449" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.449" level="INFO">${output} = package telnet is not installed</msg>
<status status="PASS" starttime="20210502 10:05:44.425" endtime="20210502 10:05:44.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.449" endtime="20210502 10:05:44.450"></status>
</kw>
<tags>
<tag>2-3-2 Ensure telnet client is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.369" endtime="20210502 10:05:44.450" critical="yes"></status>
</test>
<test id="s1-t59" name="BASElINE_2-3-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.468" level="INFO">${TAG} = ['2-3-3 Ensure LDAP client is not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.450" endtime="20210502 10:05:44.468"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.487" level="INFO">${AUDIT} = ['rpm -q openldap-clients']</msg>
<status status="PASS" starttime="20210502 10:05:44.468" endtime="20210502 10:05:44.487"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_2-3-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.506" level="INFO">${RESULT} = ['not installed']</msg>
<status status="PASS" starttime="20210502 10:05:44.487" endtime="20210502 10:05:44.506"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.507" level="INFO">Set tag '2-3-3 Ensure LDAP client is not installed'.</msg>
<status status="PASS" starttime="20210502 10:05:44.506" endtime="20210502 10:05:44.507"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.507" level="INFO">Executing command 'rpm -q openldap-clients'.</msg>
<msg timestamp="20210502 10:05:44.531" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:44.531" level="INFO">${output} = package openldap-clients is not installed</msg>
<status status="PASS" starttime="20210502 10:05:44.507" endtime="20210502 10:05:44.531"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.532" endtime="20210502 10:05:44.532"></status>
</kw>
<tags>
<tag>2-3-3 Ensure LDAP client is not installed</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.450" endtime="20210502 10:05:44.532" critical="yes"></status>
</test>
<test id="s1-t60" name="BASElINE_3-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.553" level="INFO">${TAG} = ['3-1-1 Ensure IP forwarding is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:44.532" endtime="20210502 10:05:44.553"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.571" level="INFO">${AUDIT} = ['sysctl net.ipv4.ip_forward']</msg>
<status status="PASS" starttime="20210502 10:05:44.553" endtime="20210502 10:05:44.571"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.589" level="INFO">${RESULT} = ['net.ipv4.ip_forward = 0']</msg>
<status status="PASS" starttime="20210502 10:05:44.571" endtime="20210502 10:05:44.589"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.590" level="INFO">Set tag '3-1-1 Ensure IP forwarding is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:44.589" endtime="20210502 10:05:44.590"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.590" level="INFO">Executing command 'sysctl net.ipv4.ip_forward'.</msg>
<msg timestamp="20210502 10:05:44.614" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:44.614" level="INFO">${output} = net.ipv4.ip_forward = 0</msg>
<status status="PASS" starttime="20210502 10:05:44.590" endtime="20210502 10:05:44.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.614" endtime="20210502 10:05:44.615"></status>
</kw>
<tags>
<tag>3-1-1 Ensure IP forwarding is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.532" endtime="20210502 10:05:44.615" critical="yes"></status>
</test>
<test id="s1-t61" name="BASElINE_3-1-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.635" level="INFO">${TAG} = ['3-1-2 Ensure packet redirect sending is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:44.616" endtime="20210502 10:05:44.635"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.653" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.send_redirects']</msg>
<status status="PASS" starttime="20210502 10:05:44.635" endtime="20210502 10:05:44.653"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-1-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.672" level="INFO">${RESULT} = ['net.ipv4.conf.all.send_redirects = 0']</msg>
<status status="PASS" starttime="20210502 10:05:44.653" endtime="20210502 10:05:44.672"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.672" level="INFO">Set tag '3-1-2 Ensure packet redirect sending is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:44.672" endtime="20210502 10:05:44.672"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.673" level="INFO">Executing command 'sysctl net.ipv4.conf.all.send_redirects'.</msg>
<msg timestamp="20210502 10:05:44.696" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:44.696" level="INFO">${output} = net.ipv4.conf.all.send_redirects = 0</msg>
<status status="PASS" starttime="20210502 10:05:44.672" endtime="20210502 10:05:44.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.697" endtime="20210502 10:05:44.697"></status>
</kw>
<tags>
<tag>3-1-2 Ensure packet redirect sending is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.616" endtime="20210502 10:05:44.697" critical="yes"></status>
</test>
<test id="s1-t62" name="BASElINE_3-2-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.717" level="INFO">${TAG} = ['3-2-1 Ensure source routed packets are not accepted']</msg>
<status status="PASS" starttime="20210502 10:05:44.698" endtime="20210502 10:05:44.717"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.736" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.accept_source_route']</msg>
<status status="PASS" starttime="20210502 10:05:44.717" endtime="20210502 10:05:44.736"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.755" level="INFO">${RESULT} = ['net.ipv4.conf.all.accept_source_route = 0']</msg>
<status status="PASS" starttime="20210502 10:05:44.736" endtime="20210502 10:05:44.755"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.755" level="INFO">Set tag '3-2-1 Ensure source routed packets are not accepted'.</msg>
<status status="PASS" starttime="20210502 10:05:44.755" endtime="20210502 10:05:44.755"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.756" level="INFO">Executing command 'sysctl net.ipv4.conf.all.accept_source_route'.</msg>
<msg timestamp="20210502 10:05:44.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:44.780" level="INFO">${output} = net.ipv4.conf.all.accept_source_route = 0</msg>
<status status="PASS" starttime="20210502 10:05:44.755" endtime="20210502 10:05:44.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.780" endtime="20210502 10:05:44.780"></status>
</kw>
<tags>
<tag>3-2-1 Ensure source routed packets are not accepted</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.698" endtime="20210502 10:05:44.780" critical="yes"></status>
</test>
<test id="s1-t63" name="BASElINE_3-2-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.799" level="INFO">${TAG} = ['3-2-2 Ensure ICMP redirects are not accepted']</msg>
<status status="PASS" starttime="20210502 10:05:44.781" endtime="20210502 10:05:44.799"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.818" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.accept_redirects']</msg>
<status status="PASS" starttime="20210502 10:05:44.799" endtime="20210502 10:05:44.818"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.852" level="INFO">${RESULT} = ['net.ipv4.conf.all.accept_redirects = 0']</msg>
<status status="PASS" starttime="20210502 10:05:44.818" endtime="20210502 10:05:44.852"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.852" level="INFO">Set tag '3-2-2 Ensure ICMP redirects are not accepted'.</msg>
<status status="PASS" starttime="20210502 10:05:44.852" endtime="20210502 10:05:44.852"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.852" level="INFO">Executing command 'sysctl net.ipv4.conf.all.accept_redirects'.</msg>
<msg timestamp="20210502 10:05:44.876" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:44.876" level="INFO">${output} = net.ipv4.conf.all.accept_redirects = 0</msg>
<status status="PASS" starttime="20210502 10:05:44.852" endtime="20210502 10:05:44.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.877" endtime="20210502 10:05:44.877"></status>
</kw>
<tags>
<tag>3-2-2 Ensure ICMP redirects are not accepted</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.781" endtime="20210502 10:05:44.877" critical="yes"></status>
</test>
<test id="s1-t64" name="BASElINE_3-2-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.901" level="INFO">${TAG} = ['3-2-3 Ensure secure ICMP redirects are not accepted ']</msg>
<status status="PASS" starttime="20210502 10:05:44.878" endtime="20210502 10:05:44.901"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:44.920" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.secure_redirects']</msg>
<status status="PASS" starttime="20210502 10:05:44.901" endtime="20210502 10:05:44.920"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:44.938" level="INFO">${RESULT} = ['net.ipv4.conf.all.secure_redirects = 0']</msg>
<status status="PASS" starttime="20210502 10:05:44.921" endtime="20210502 10:05:44.938"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:44.939" level="INFO">Set tag '3-2-3 Ensure secure ICMP redirects are not accepted '.</msg>
<status status="PASS" starttime="20210502 10:05:44.938" endtime="20210502 10:05:44.939"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:44.940" level="INFO">Executing command 'sysctl net.ipv4.conf.all.secure_redirects'.</msg>
<msg timestamp="20210502 10:05:44.963" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:44.963" level="INFO">${output} = net.ipv4.conf.all.secure_redirects = 0</msg>
<status status="PASS" starttime="20210502 10:05:44.939" endtime="20210502 10:05:44.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:44.963" endtime="20210502 10:05:44.963"></status>
</kw>
<tags>
<tag>3-2-3 Ensure secure ICMP redirects are not accepted </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.878" endtime="20210502 10:05:44.963" critical="yes"></status>
</test>
<test id="s1-t65" name="BASElINE_3-2-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:44.983" level="INFO">${TAG} = ['3-2-4 Ensure suspicious packets are logged ']</msg>
<status status="PASS" starttime="20210502 10:05:44.964" endtime="20210502 10:05:44.983"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.001" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.log_martians']</msg>
<status status="PASS" starttime="20210502 10:05:44.983" endtime="20210502 10:05:45.001"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.020" level="INFO">${RESULT} = ['net.ipv4.conf.all.log_martians = 1']</msg>
<status status="PASS" starttime="20210502 10:05:45.001" endtime="20210502 10:05:45.020"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.021" level="INFO">Set tag '3-2-4 Ensure suspicious packets are logged '.</msg>
<status status="PASS" starttime="20210502 10:05:45.021" endtime="20210502 10:05:45.021"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.022" level="INFO">Executing command 'sysctl net.ipv4.conf.all.log_martians'.</msg>
<msg timestamp="20210502 10:05:45.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.045" level="INFO">${output} = net.ipv4.conf.all.log_martians = 1</msg>
<status status="PASS" starttime="20210502 10:05:45.021" endtime="20210502 10:05:45.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.045" endtime="20210502 10:05:45.046"></status>
</kw>
<tags>
<tag>3-2-4 Ensure suspicious packets are logged </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:44.964" endtime="20210502 10:05:45.046" critical="yes"></status>
</test>
<test id="s1-t66" name="BASElINE_3-2-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.065" level="INFO">${TAG} = ['3-2-5 Ensure broadcast ICMP requests are ignored ']</msg>
<status status="PASS" starttime="20210502 10:05:45.047" endtime="20210502 10:05:45.065"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.087" level="INFO">${AUDIT} = ['sysctl net.ipv4.icmp_echo_ignore_broadcasts']</msg>
<status status="PASS" starttime="20210502 10:05:45.066" endtime="20210502 10:05:45.087"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.108" level="INFO">${RESULT} = ['net.ipv4.icmp_echo_ignore_broadcasts = 1']</msg>
<status status="PASS" starttime="20210502 10:05:45.087" endtime="20210502 10:05:45.108"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.109" level="INFO">Set tag '3-2-5 Ensure broadcast ICMP requests are ignored '.</msg>
<status status="PASS" starttime="20210502 10:05:45.108" endtime="20210502 10:05:45.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.109" level="INFO">Executing command 'sysctl net.ipv4.icmp_echo_ignore_broadcasts'.</msg>
<msg timestamp="20210502 10:05:45.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.123" level="INFO">${output} = net.ipv4.icmp_echo_ignore_broadcasts = 1</msg>
<status status="PASS" starttime="20210502 10:05:45.109" endtime="20210502 10:05:45.124"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.124" endtime="20210502 10:05:45.124"></status>
</kw>
<tags>
<tag>3-2-5 Ensure broadcast ICMP requests are ignored </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.046" endtime="20210502 10:05:45.124" critical="yes"></status>
</test>
<test id="s1-t67" name="BASElINE_3-2-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.143" level="INFO">${TAG} = ['3-2-6 Ensure bogus ICMP responses are ignored ']</msg>
<status status="PASS" starttime="20210502 10:05:45.124" endtime="20210502 10:05:45.143"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.162" level="INFO">${AUDIT} = ['sysctl net.ipv4.icmp_ignore_bogus_error_responses']</msg>
<status status="PASS" starttime="20210502 10:05:45.143" endtime="20210502 10:05:45.162"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.182" level="INFO">${RESULT} = ['net.ipv4.icmp_ignore_bogus_error_responses = 1']</msg>
<status status="PASS" starttime="20210502 10:05:45.162" endtime="20210502 10:05:45.182"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.183" level="INFO">Set tag '3-2-6 Ensure bogus ICMP responses are ignored '.</msg>
<status status="PASS" starttime="20210502 10:05:45.182" endtime="20210502 10:05:45.183"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.184" level="INFO">Executing command 'sysctl net.ipv4.icmp_ignore_bogus_error_responses'.</msg>
<msg timestamp="20210502 10:05:45.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.208" level="INFO">${output} = net.ipv4.icmp_ignore_bogus_error_responses = 1</msg>
<status status="PASS" starttime="20210502 10:05:45.183" endtime="20210502 10:05:45.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.208" endtime="20210502 10:05:45.208"></status>
</kw>
<tags>
<tag>3-2-6 Ensure bogus ICMP responses are ignored </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.124" endtime="20210502 10:05:45.208" critical="yes"></status>
</test>
<test id="s1-t68" name="BASElINE_3-2-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.227" level="INFO">${TAG} = ['3-2-7 Ensure Reverse Path Filtering is enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:45.209" endtime="20210502 10:05:45.227"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.247" level="INFO">${AUDIT} = ['sysctl net.ipv4.conf.all.rp_filter']</msg>
<status status="PASS" starttime="20210502 10:05:45.227" endtime="20210502 10:05:45.247"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.267" level="INFO">${RESULT} = ['net.ipv4.conf.all.rp_filter = 1']</msg>
<status status="PASS" starttime="20210502 10:05:45.247" endtime="20210502 10:05:45.267"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.268" level="INFO">Set tag '3-2-7 Ensure Reverse Path Filtering is enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:45.268" endtime="20210502 10:05:45.268"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.268" level="INFO">Executing command 'sysctl net.ipv4.conf.all.rp_filter'.</msg>
<msg timestamp="20210502 10:05:45.292" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.292" level="INFO">${output} = net.ipv4.conf.all.rp_filter = 1</msg>
<status status="PASS" starttime="20210502 10:05:45.268" endtime="20210502 10:05:45.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.292" endtime="20210502 10:05:45.293"></status>
</kw>
<tags>
<tag>3-2-7 Ensure Reverse Path Filtering is enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.208" endtime="20210502 10:05:45.293" critical="yes"></status>
</test>
<test id="s1-t69" name="BASElINE_3-2-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.312" level="INFO">${TAG} = ['3-2-8 Ensure TCP SYN Cookies is enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:45.293" endtime="20210502 10:05:45.312"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.334" level="INFO">${AUDIT} = ['sysctl net.ipv4.tcp_syncookies']</msg>
<status status="PASS" starttime="20210502 10:05:45.313" endtime="20210502 10:05:45.334"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.356" level="INFO">${RESULT} = ['net.ipv4.tcp_syncookies = 1']</msg>
<status status="PASS" starttime="20210502 10:05:45.334" endtime="20210502 10:05:45.356"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.356" level="INFO">Set tag '3-2-8 Ensure TCP SYN Cookies is enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:45.356" endtime="20210502 10:05:45.356"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.357" level="INFO">Executing command 'sysctl net.ipv4.tcp_syncookies'.</msg>
<msg timestamp="20210502 10:05:45.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.380" level="INFO">${output} = net.ipv4.tcp_syncookies = 1</msg>
<status status="PASS" starttime="20210502 10:05:45.357" endtime="20210502 10:05:45.380"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.380" endtime="20210502 10:05:45.381"></status>
</kw>
<tags>
<tag>3-2-8 Ensure TCP SYN Cookies is enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.293" endtime="20210502 10:05:45.381" critical="yes"></status>
</test>
<test id="s1-t70" name="BASElINE_3-2-9">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-9.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.399" level="INFO">${TAG} = ['3-2-9 Ensure IPv6 router advertisements are not accepted ']</msg>
<status status="PASS" starttime="20210502 10:05:45.382" endtime="20210502 10:05:45.399"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-9.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.418" level="INFO">${AUDIT} = ['sysctl net.ipv6.conf.all.accept_ra']</msg>
<status status="PASS" starttime="20210502 10:05:45.399" endtime="20210502 10:05:45.418"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-2-9.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.438" level="INFO">${RESULT} = ['net.ipv6.conf.all.accept_ra = 0']</msg>
<status status="PASS" starttime="20210502 10:05:45.418" endtime="20210502 10:05:45.438"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.438" level="INFO">Set tag '3-2-9 Ensure IPv6 router advertisements are not accepted '.</msg>
<status status="PASS" starttime="20210502 10:05:45.438" endtime="20210502 10:05:45.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.439" level="INFO">Executing command 'sysctl net.ipv6.conf.all.accept_ra'.</msg>
<msg timestamp="20210502 10:05:45.464" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.464" level="INFO">${output} = net.ipv6.conf.all.accept_ra = 0</msg>
<status status="PASS" starttime="20210502 10:05:45.438" endtime="20210502 10:05:45.464"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.464" endtime="20210502 10:05:45.464"></status>
</kw>
<tags>
<tag>3-2-9 Ensure IPv6 router advertisements are not accepted </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.381" endtime="20210502 10:05:45.464" critical="yes"></status>
</test>
<test id="s1-t71" name="BASElINE_3-3-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-3-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.485" level="INFO">${TAG} = ['3-3-1 Ensure SCTP is disabled ']</msg>
<status status="PASS" starttime="20210502 10:05:45.465" endtime="20210502 10:05:45.485"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-3-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.504" level="INFO">${AUDIT} = ['lsmod | grep sctp']</msg>
<status status="PASS" starttime="20210502 10:05:45.485" endtime="20210502 10:05:45.505"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-3-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.524" level="INFO">${RESULT} = ['']</msg>
<status status="PASS" starttime="20210502 10:05:45.505" endtime="20210502 10:05:45.524"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.525" level="INFO">Set tag '3-3-1 Ensure SCTP is disabled '.</msg>
<status status="PASS" starttime="20210502 10:05:45.524" endtime="20210502 10:05:45.525"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.525" level="INFO">Executing command 'lsmod | grep sctp'.</msg>
<msg timestamp="20210502 10:05:45.549" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:45.549" level="INFO">${output} = </msg>
<status status="PASS" starttime="20210502 10:05:45.525" endtime="20210502 10:05:45.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.549" endtime="20210502 10:05:45.550"></status>
</kw>
<tags>
<tag>3-3-1 Ensure SCTP is disabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.465" endtime="20210502 10:05:45.550" critical="yes"></status>
</test>
<test id="s1-t72" name="BASElINE_3-4-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.570" level="INFO">${TAG} = ['3-4-1 Ensure a Firewall package is installed ']</msg>
<status status="PASS" starttime="20210502 10:05:45.551" endtime="20210502 10:05:45.570"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.589" level="INFO">${AUDIT} = ['rpm -q firewalld']</msg>
<status status="PASS" starttime="20210502 10:05:45.570" endtime="20210502 10:05:45.589"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.609" level="INFO">${RESULT} = ['firewalld-0.8.0-4']</msg>
<status status="PASS" starttime="20210502 10:05:45.589" endtime="20210502 10:05:45.609"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.610" level="INFO">Set tag '3-4-1 Ensure a Firewall package is installed '.</msg>
<status status="PASS" starttime="20210502 10:05:45.609" endtime="20210502 10:05:45.610"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.610" level="INFO">Executing command 'rpm -q firewalld'.</msg>
<msg timestamp="20210502 10:05:45.750" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.750" level="INFO">${output} = firewalld-0.8.0-4.el8.noarch</msg>
<status status="PASS" starttime="20210502 10:05:45.610" endtime="20210502 10:05:45.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.751" endtime="20210502 10:05:45.752"></status>
</kw>
<tags>
<tag>3-4-1 Ensure a Firewall package is installed </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.550" endtime="20210502 10:05:45.752" critical="yes"></status>
</test>
<test id="s1-t73" name="BASElINE_3-4-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.793" level="INFO">${TAG} = ['3-4-2 Ensure firewalld service is enabled and running ']</msg>
<status status="PASS" starttime="20210502 10:05:45.754" endtime="20210502 10:05:45.793"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.811" level="INFO">${AUDIT} = ['systemctl is-enabled firewalld']</msg>
<status status="PASS" starttime="20210502 10:05:45.793" endtime="20210502 10:05:45.811"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.830" level="INFO">${RESULT} = ['enable']</msg>
<status status="PASS" starttime="20210502 10:05:45.811" endtime="20210502 10:05:45.830"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.830" level="INFO">Set tag '3-4-2 Ensure firewalld service is enabled and running '.</msg>
<status status="PASS" starttime="20210502 10:05:45.830" endtime="20210502 10:05:45.830"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.830" level="INFO">Executing command 'systemctl is-enabled firewalld'.</msg>
<msg timestamp="20210502 10:05:45.854" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:45.854" level="INFO">${output} = enabled</msg>
<status status="PASS" starttime="20210502 10:05:45.830" endtime="20210502 10:05:45.854"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.854" endtime="20210502 10:05:45.855"></status>
</kw>
<tags>
<tag>3-4-2 Ensure firewalld service is enabled and running </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.753" endtime="20210502 10:05:45.855" critical="yes"></status>
</test>
<test id="s1-t74" name="BASElINE_3-4-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.875" level="INFO">${TAG} = ['3-4-3 Ensure nftables is not enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:45.855" endtime="20210502 10:05:45.875"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.893" level="INFO">${AUDIT} = ['systemctl is-enabled nftables']</msg>
<status status="PASS" starttime="20210502 10:05:45.875" endtime="20210502 10:05:45.893"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:45.914" level="INFO">${RESULT} = ['masked']</msg>
<status status="PASS" starttime="20210502 10:05:45.894" endtime="20210502 10:05:45.914"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:45.915" level="INFO">Set tag '3-4-3 Ensure nftables is not enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:45.914" endtime="20210502 10:05:45.915"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:45.915" level="INFO">Executing command 'systemctl is-enabled nftables'.</msg>
<msg timestamp="20210502 10:05:45.939" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:45.939" level="INFO">${output} = masked</msg>
<status status="PASS" starttime="20210502 10:05:45.915" endtime="20210502 10:05:45.939"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:45.939" endtime="20210502 10:05:45.939"></status>
</kw>
<tags>
<tag>3-4-3 Ensure nftables is not enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.855" endtime="20210502 10:05:45.939" critical="yes"></status>
</test>
<test id="s1-t75" name="BASElINE_3-4-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:45.973" level="INFO">${TAG} = ['3-4-4 Ensure default zone is set ']</msg>
<status status="PASS" starttime="20210502 10:05:45.940" endtime="20210502 10:05:45.973"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:45.992" level="INFO">${AUDIT} = ['firewall-cmd --get-default-zone']</msg>
<status status="PASS" starttime="20210502 10:05:45.973" endtime="20210502 10:05:45.992"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:46.009" level="INFO">${RESULT} = ['public']</msg>
<status status="PASS" starttime="20210502 10:05:45.992" endtime="20210502 10:05:46.009"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:46.010" level="INFO">Set tag '3-4-4 Ensure default zone is set '.</msg>
<status status="PASS" starttime="20210502 10:05:46.009" endtime="20210502 10:05:46.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:46.010" level="INFO">Executing command 'firewall-cmd --get-default-zone'.</msg>
<msg timestamp="20210502 10:05:46.339" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:46.339" level="INFO">${output} = public</msg>
<status status="PASS" starttime="20210502 10:05:46.010" endtime="20210502 10:05:46.339"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:46.340" endtime="20210502 10:05:46.341"></status>
</kw>
<tags>
<tag>3-4-4 Ensure default zone is set </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:45.939" endtime="20210502 10:05:46.341" critical="yes"></status>
</test>
<test id="s1-t76" name="BASElINE_3-4-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:46.360" level="INFO">${TAG} = ['3-4-5 Ensure network interfaces are assigned to appropriate zone']</msg>
<status status="PASS" starttime="20210502 10:05:46.341" endtime="20210502 10:05:46.360"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:46.377" level="INFO">${AUDIT} = ["nmcli -t connection show | awk -F: '{if($4){print $4}}' | while read INT; do firewall-cmd --get-active-zones | grep -B1 $INT; done"]</msg>
<status status="PASS" starttime="20210502 10:05:46.360" endtime="20210502 10:05:46.377"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:46.396" level="INFO">${RESULT} = ['ens33']</msg>
<status status="PASS" starttime="20210502 10:05:46.378" endtime="20210502 10:05:46.396"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:46.396" level="INFO">Set tag '3-4-5 Ensure network interfaces are assigned to appropriate zone'.</msg>
<status status="PASS" starttime="20210502 10:05:46.396" endtime="20210502 10:05:46.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:46.396" level="INFO">Executing command 'nmcli -t connection show | awk -F: '{if($4){print $4}}' | while read INT; do firewall-cmd --get-active-zones | grep -B1 $INT; done'.</msg>
<msg timestamp="20210502 10:05:46.737" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:46.737" level="INFO">${output} = public
  interfaces: ens33</msg>
<status status="PASS" starttime="20210502 10:05:46.396" endtime="20210502 10:05:46.737"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:46.737" endtime="20210502 10:05:46.737"></status>
</kw>
<tags>
<tag>3-4-5 Ensure network interfaces are assigned to appropriate zone</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:46.341" endtime="20210502 10:05:46.737" critical="yes"></status>
</test>
<test id="s1-t77" name="BASElINE_3-4-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:46.758" level="INFO">${TAG} = ['3-4-6 Ensure iptables is not enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:46.739" endtime="20210502 10:05:46.758"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:46.776" level="INFO">${AUDIT} = ['systemctl status iptables']</msg>
<status status="PASS" starttime="20210502 10:05:46.758" endtime="20210502 10:05:46.776"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:46.796" level="INFO">${RESULT} = ['Active']</msg>
<status status="PASS" starttime="20210502 10:05:46.776" endtime="20210502 10:05:46.796"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:46.796" level="INFO">Set tag '3-4-6 Ensure iptables is not enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:46.796" endtime="20210502 10:05:46.796"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:46.797" level="INFO">Executing command 'systemctl status iptables'.</msg>
<msg timestamp="20210502 10:05:47.019" level="INFO">Command exited with return code 3.</msg>
<msg timestamp="20210502 10:05:47.020" level="INFO">${output} = ● iptables.service - IPv4 firewall with iptables
   Loaded: loaded (/usr/lib/systemd/system/iptables.service; disabled; vendor preset: disabled)
   Active: inactive (dead)</msg>
<status status="PASS" starttime="20210502 10:05:46.796" endtime="20210502 10:05:47.021"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.021" endtime="20210502 10:05:47.023"></status>
</kw>
<tags>
<tag>3-4-6 Ensure iptables is not enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:46.738" endtime="20210502 10:05:47.023" critical="yes"></status>
</test>
<test id="s1-t78" name="BASElINE_3-4-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.055" level="INFO">${TAG} = ['3-4-7 Ensure a table exists ']</msg>
<status status="PASS" starttime="20210502 10:05:47.025" endtime="20210502 10:05:47.056"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.073" level="INFO">${AUDIT} = ['nft list tables']</msg>
<status status="PASS" starttime="20210502 10:05:47.056" endtime="20210502 10:05:47.073"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.093" level="INFO">${RESULT} = ['table ip filter']</msg>
<status status="PASS" starttime="20210502 10:05:47.074" endtime="20210502 10:05:47.093"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.093" level="INFO">Set tag '3-4-7 Ensure a table exists '.</msg>
<status status="PASS" starttime="20210502 10:05:47.093" endtime="20210502 10:05:47.093"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.093" level="INFO">Executing command 'nft list tables'.</msg>
<msg timestamp="20210502 10:05:47.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.148" level="INFO">${output} = table ip filter
table ip6 filter
table bridge filter
table ip security
table ip raw
table ip mangle
table ip nat
table ip6 security
table ip6 raw
table ip6 mangle
table ip6 nat
table bridge nat
table ...</msg>
<status status="PASS" starttime="20210502 10:05:47.093" endtime="20210502 10:05:47.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.148" endtime="20210502 10:05:47.148"></status>
</kw>
<tags>
<tag>3-4-7 Ensure a table exists </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.024" endtime="20210502 10:05:47.149" critical="yes"></status>
</test>
<test id="s1-t79" name="BASElINE_3-4-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.199" level="INFO">${TAG} = ['3-4-8 Ensure nftables service is enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:47.150" endtime="20210502 10:05:47.199"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.244" level="INFO">${AUDIT} = ['systemctl is-enabled nftables']</msg>
<status status="PASS" starttime="20210502 10:05:47.199" endtime="20210502 10:05:47.244"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-4-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.283" level="INFO">${RESULT} = ['masked']</msg>
<status status="PASS" starttime="20210502 10:05:47.244" endtime="20210502 10:05:47.283"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.283" level="INFO">Set tag '3-4-8 Ensure nftables service is enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:47.283" endtime="20210502 10:05:47.283"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.284" level="INFO">Executing command 'systemctl is-enabled nftables'.</msg>
<msg timestamp="20210502 10:05:47.307" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20210502 10:05:47.307" level="INFO">${output} = masked</msg>
<status status="PASS" starttime="20210502 10:05:47.284" endtime="20210502 10:05:47.307"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.307" endtime="20210502 10:05:47.308"></status>
</kw>
<tags>
<tag>3-4-8 Ensure nftables service is enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.150" endtime="20210502 10:05:47.308" critical="yes"></status>
</test>
<test id="s1-t80" name="BASElINE_3-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.328" level="INFO">${TAG} = ['3-5 Ensure wireless interfaces are disabled ']</msg>
<status status="PASS" starttime="20210502 10:05:47.309" endtime="20210502 10:05:47.328"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.346" level="INFO">${AUDIT} = ['nmcli radio all']</msg>
<status status="PASS" starttime="20210502 10:05:47.328" endtime="20210502 10:05:47.347"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.364" level="INFO">${RESULT} = ['enabled  disabled  enabled  disabled']</msg>
<status status="PASS" starttime="20210502 10:05:47.347" endtime="20210502 10:05:47.364"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.365" level="INFO">Set tag '3-5 Ensure wireless interfaces are disabled '.</msg>
<status status="PASS" starttime="20210502 10:05:47.364" endtime="20210502 10:05:47.365"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.365" level="INFO">Executing command 'nmcli radio all'.</msg>
<msg timestamp="20210502 10:05:47.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.399" level="INFO">${output} = WIFI-HW  WIFI      WWAN-HW  WWAN     
enabled  disabled  enabled  disabled </msg>
<status status="PASS" starttime="20210502 10:05:47.365" endtime="20210502 10:05:47.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.399" endtime="20210502 10:05:47.400"></status>
</kw>
<tags>
<tag>3-5 Ensure wireless interfaces are disabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.308" endtime="20210502 10:05:47.400" critical="yes"></status>
</test>
<test id="s1-t81" name="BASElINE_3-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.419" level="INFO">${TAG} = ['3-6 Disable IPv6']</msg>
<status status="PASS" starttime="20210502 10:05:47.401" endtime="20210502 10:05:47.419"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.436" level="INFO">${AUDIT} = [' sysctl -w net.ipv6.conf.all.disable_ipv6=1']</msg>
<status status="PASS" starttime="20210502 10:05:47.419" endtime="20210502 10:05:47.436"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_3-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.454" level="INFO">${RESULT} = ['disable_ipv6 = 1']</msg>
<status status="PASS" starttime="20210502 10:05:47.436" endtime="20210502 10:05:47.455"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.455" level="INFO">Set tag '3-6 Disable IPv6'.</msg>
<status status="PASS" starttime="20210502 10:05:47.455" endtime="20210502 10:05:47.455"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.456" level="INFO">Executing command ' sysctl -w net.ipv6.conf.all.disable_ipv6=1'.</msg>
<msg timestamp="20210502 10:05:47.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.479" level="INFO">${output} = net.ipv6.conf.all.disable_ipv6 = 1</msg>
<status status="PASS" starttime="20210502 10:05:47.455" endtime="20210502 10:05:47.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.479" endtime="20210502 10:05:47.480"></status>
</kw>
<tags>
<tag>3-6 Disable IPv6</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.401" endtime="20210502 10:05:47.480" critical="yes"></status>
</test>
<test id="s1-t82" name="BASElINE_4-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.499" level="INFO">${TAG} = ['4-1-1 Ensure auditd is installed ']</msg>
<status status="PASS" starttime="20210502 10:05:47.481" endtime="20210502 10:05:47.499"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.523" level="INFO">${AUDIT} = ['rpm -q audit audit-libs']</msg>
<status status="PASS" starttime="20210502 10:05:47.500" endtime="20210502 10:05:47.523"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.545" level="INFO">${RESULT} = ['audit-libs-3.0-0.17']</msg>
<status status="PASS" starttime="20210502 10:05:47.523" endtime="20210502 10:05:47.545"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.546" level="INFO">Set tag '4-1-1 Ensure auditd is installed '.</msg>
<status status="PASS" starttime="20210502 10:05:47.545" endtime="20210502 10:05:47.546"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.546" level="INFO">Executing command 'rpm -q audit audit-libs'.</msg>
<msg timestamp="20210502 10:05:47.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.569" level="INFO">${output} = audit-3.0-0.17.20191104git1c2f876.el8.x86_64
audit-libs-3.0-0.17.20191104git1c2f876.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:47.546" endtime="20210502 10:05:47.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.569" endtime="20210502 10:05:47.570"></status>
</kw>
<tags>
<tag>4-1-1 Ensure auditd is installed </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.481" endtime="20210502 10:05:47.570" critical="yes"></status>
</test>
<test id="s1-t83" name="BASElINE_4-1-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.591" level="INFO">${TAG} = ['4-1-2 Ensure auditd service is enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:47.571" endtime="20210502 10:05:47.591"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.609" level="INFO">${AUDIT} = ['systemctl is-enabled auditd']</msg>
<status status="PASS" starttime="20210502 10:05:47.591" endtime="20210502 10:05:47.609"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.629" level="INFO">${RESULT} = ['enable']</msg>
<status status="PASS" starttime="20210502 10:05:47.609" endtime="20210502 10:05:47.629"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.630" level="INFO">Set tag '4-1-2 Ensure auditd service is enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:47.629" endtime="20210502 10:05:47.630"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.630" level="INFO">Executing command 'systemctl is-enabled auditd'.</msg>
<msg timestamp="20210502 10:05:47.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.654" level="INFO">${output} = enabled</msg>
<status status="PASS" starttime="20210502 10:05:47.630" endtime="20210502 10:05:47.654"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.654" endtime="20210502 10:05:47.654"></status>
</kw>
<tags>
<tag>4-1-2 Ensure auditd service is enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.571" endtime="20210502 10:05:47.654" critical="yes"></status>
</test>
<test id="s1-t84" name="BASElINE_4-1-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.673" level="INFO">${TAG} = ['4-1-3 Ensure auditing for processes that start prior to auditd is enabled ']</msg>
<status status="PASS" starttime="20210502 10:05:47.655" endtime="20210502 10:05:47.673"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.690" level="INFO">${AUDIT} = ["grep -E 'kernelopts=(\\S+\\s+)*audit=1\\b' /boot/grub2/grubenv"]</msg>
<status status="PASS" starttime="20210502 10:05:47.673" endtime="20210502 10:05:47.690"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.709" level="INFO">${RESULT} = ['audit=1']</msg>
<status status="PASS" starttime="20210502 10:05:47.690" endtime="20210502 10:05:47.709"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.710" level="INFO">Set tag '4-1-3 Ensure auditing for processes that start prior to auditd is enabled '.</msg>
<status status="PASS" starttime="20210502 10:05:47.709" endtime="20210502 10:05:47.710"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.710" level="INFO">Executing command 'grep -E 'kernelopts=(\S+\s+)*audit=1\b' /boot/grub2/grubenv'.</msg>
<msg timestamp="20210502 10:05:47.734" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.734" level="INFO">${output} = kernelopts=root=/dev/mapper/cl-root ro audit=1 </msg>
<status status="PASS" starttime="20210502 10:05:47.710" endtime="20210502 10:05:47.734"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.734" endtime="20210502 10:05:47.734"></status>
</kw>
<tags>
<tag>4-1-3 Ensure auditing for processes that start prior to auditd is enabled </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.654" endtime="20210502 10:05:47.734" critical="yes"></status>
</test>
<test id="s1-t85" name="BASElINE_4-1-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.753" level="INFO">${TAG} = ['4-1-4 Ensure audit log storage size is configured ']</msg>
<status status="PASS" starttime="20210502 10:05:47.735" endtime="20210502 10:05:47.753"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.772" level="INFO">${AUDIT} = ['grep max_log_file /etc/audit/auditd.conf']</msg>
<status status="PASS" starttime="20210502 10:05:47.753" endtime="20210502 10:05:47.772"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.805" level="INFO">${RESULT} = ['max_log_file = 8']</msg>
<status status="PASS" starttime="20210502 10:05:47.772" endtime="20210502 10:05:47.805"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.806" level="INFO">Set tag '4-1-4 Ensure audit log storage size is configured '.</msg>
<status status="PASS" starttime="20210502 10:05:47.805" endtime="20210502 10:05:47.806"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.806" level="INFO">Executing command 'grep max_log_file /etc/audit/auditd.conf'.</msg>
<msg timestamp="20210502 10:05:47.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.829" level="INFO">${output} = max_log_file = 8
max_log_file_action = ROTATE</msg>
<status status="PASS" starttime="20210502 10:05:47.806" endtime="20210502 10:05:47.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.829" endtime="20210502 10:05:47.830"></status>
</kw>
<tags>
<tag>4-1-4 Ensure audit log storage size is configured </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.735" endtime="20210502 10:05:47.830" critical="yes"></status>
</test>
<test id="s1-t86" name="BASElINE_4-1-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.848" level="INFO">${TAG} = ['4-1-5 Ensure audit logs are not automatically deleted ']</msg>
<status status="PASS" starttime="20210502 10:05:47.831" endtime="20210502 10:05:47.848"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.867" level="INFO">${AUDIT} = ['grep max_log_file_action /etc/audit/auditd.conf']</msg>
<status status="PASS" starttime="20210502 10:05:47.849" endtime="20210502 10:05:47.867"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.886" level="INFO">${RESULT} = ['max_log_file_action = ROTATE']</msg>
<status status="PASS" starttime="20210502 10:05:47.867" endtime="20210502 10:05:47.886"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.887" level="INFO">Set tag '4-1-5 Ensure audit logs are not automatically deleted '.</msg>
<status status="PASS" starttime="20210502 10:05:47.886" endtime="20210502 10:05:47.887"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.887" level="INFO">Executing command 'grep max_log_file_action /etc/audit/auditd.conf'.</msg>
<msg timestamp="20210502 10:05:47.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.900" level="INFO">${output} = max_log_file_action = ROTATE</msg>
<status status="PASS" starttime="20210502 10:05:47.887" endtime="20210502 10:05:47.900"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.900" endtime="20210502 10:05:47.901"></status>
</kw>
<tags>
<tag>4-1-5 Ensure audit logs are not automatically deleted </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.831" endtime="20210502 10:05:47.901" critical="yes"></status>
</test>
<test id="s1-t87" name="BASElINE_4-1-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:47.923" level="INFO">${TAG} = ['4-1-6 Ensure system is disabled when audit logs are full ']</msg>
<status status="PASS" starttime="20210502 10:05:47.901" endtime="20210502 10:05:47.923"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:47.942" level="INFO">${AUDIT} = ['grep space_left_action /etc/audit/auditd.conf']</msg>
<status status="PASS" starttime="20210502 10:05:47.923" endtime="20210502 10:05:47.942"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:47.963" level="INFO">${RESULT} = ['space_left_action = SYSLOG']</msg>
<status status="PASS" starttime="20210502 10:05:47.942" endtime="20210502 10:05:47.963"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:47.963" level="INFO">Set tag '4-1-6 Ensure system is disabled when audit logs are full '.</msg>
<status status="PASS" starttime="20210502 10:05:47.963" endtime="20210502 10:05:47.964"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:47.964" level="INFO">Executing command 'grep space_left_action /etc/audit/auditd.conf'.</msg>
<msg timestamp="20210502 10:05:47.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:47.987" level="INFO">${output} = space_left_action = SYSLOG
admin_space_left_action = SUSPEND</msg>
<status status="PASS" starttime="20210502 10:05:47.964" endtime="20210502 10:05:47.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:47.987" endtime="20210502 10:05:47.987"></status>
</kw>
<tags>
<tag>4-1-6 Ensure system is disabled when audit logs are full </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.901" endtime="20210502 10:05:47.987" critical="yes"></status>
</test>
<test id="s1-t88" name="BASElINE_4-1-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.006" level="INFO">${TAG} = ['4-1-7 Ensure changes to system administration scope is collected']</msg>
<status status="PASS" starttime="20210502 10:05:47.988" endtime="20210502 10:05:48.006"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.024" level="INFO">${AUDIT} = ['grep scope /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.006" endtime="20210502 10:05:48.024"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.042" level="INFO">${RESULT} = ['-p wa -k scope']</msg>
<status status="PASS" starttime="20210502 10:05:48.024" endtime="20210502 10:05:48.042"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.043" level="INFO">Set tag '4-1-7 Ensure changes to system administration scope is collected'.</msg>
<status status="PASS" starttime="20210502 10:05:48.042" endtime="20210502 10:05:48.043"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.044" level="INFO">Executing command 'grep scope /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.057" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.057" level="INFO">${output} = /etc/audit/rules.d/scope.rules:-w /etc/sudoers -p wa -k scope
/etc/audit/rules.d/scope.rules:-w /etc/sudoers.d/ -p wa -k scope</msg>
<status status="PASS" starttime="20210502 10:05:48.043" endtime="20210502 10:05:48.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.057" endtime="20210502 10:05:48.057"></status>
</kw>
<tags>
<tag>4-1-7 Ensure changes to system administration scope is collected</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:47.988" endtime="20210502 10:05:48.057" critical="yes"></status>
</test>
<test id="s1-t89" name="BASElINE_4-1-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.077" level="INFO">${TAG} = ['4-1-8 Ensure login and logout events are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.058" endtime="20210502 10:05:48.077"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.095" level="INFO">${AUDIT} = ['grep logins /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.077" endtime="20210502 10:05:48.095"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.115" level="INFO">${RESULT} = ['faillog -p wa -k logins']</msg>
<status status="PASS" starttime="20210502 10:05:48.095" endtime="20210502 10:05:48.115"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.116" level="INFO">Set tag '4-1-8 Ensure login and logout events are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.115" endtime="20210502 10:05:48.116"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.116" level="INFO">Executing command 'grep logins /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.129" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.130" level="INFO">${output} = /etc/audit/rules.d/audit.rules:-w /var/log/faillog -p wa -k logins
/etc/audit/rules.d/audit.rules:-w /var/log/lastlog -p wa -k logins
/etc/audit/rules.d/logins.rules:-w /var/log/wtmp -p wa -k logins
/...</msg>
<status status="PASS" starttime="20210502 10:05:48.116" endtime="20210502 10:05:48.130"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.130" endtime="20210502 10:05:48.131"></status>
</kw>
<tags>
<tag>4-1-8 Ensure login and logout events are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.057" endtime="20210502 10:05:48.131" critical="yes"></status>
</test>
<test id="s1-t90" name="BASElINE_4-1-9">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-9.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.149" level="INFO">${TAG} = ['4-1-9 Ensure session initiation information is collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.131" endtime="20210502 10:05:48.150"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-9.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.168" level="INFO">${AUDIT} = ["grep -E '(session|logins)' /etc/audit/rules.d/*.rules"]</msg>
<status status="PASS" starttime="20210502 10:05:48.150" endtime="20210502 10:05:48.168"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-9.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.188" level="INFO">${RESULT} = ['/var/log/wtmp -p wa -k logins']</msg>
<status status="PASS" starttime="20210502 10:05:48.168" endtime="20210502 10:05:48.188"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.188" level="INFO">Set tag '4-1-9 Ensure session initiation information is collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.188" endtime="20210502 10:05:48.188"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.188" level="INFO">Executing command 'grep -E '(session|logins)' /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.202" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.202" level="INFO">${output} = /etc/audit/rules.d/audit.rules:-w /var/log/faillog -p wa -k logins
/etc/audit/rules.d/audit.rules:-w /var/log/lastlog -p wa -k logins
/etc/audit/rules.d/logins.rules:-w /var/run/utmp -p wa -k session
...</msg>
<status status="PASS" starttime="20210502 10:05:48.188" endtime="20210502 10:05:48.202"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.202" endtime="20210502 10:05:48.202"></status>
</kw>
<tags>
<tag>4-1-9 Ensure session initiation information is collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.131" endtime="20210502 10:05:48.202" critical="yes"></status>
</test>
<test id="s1-t91" name="BASElINE_4-1-10">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-10.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.221" level="INFO">${TAG} = ['4-1-10 Ensure events that modify date and time information are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.203" endtime="20210502 10:05:48.221"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-10.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.240" level="INFO">${AUDIT} = ['grep time-change /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.221" endtime="20210502 10:05:48.240"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-10.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.259" level="INFO">${RESULT} = ['clock_settime -k time-change']</msg>
<status status="PASS" starttime="20210502 10:05:48.240" endtime="20210502 10:05:48.259"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.260" level="INFO">Set tag '4-1-10 Ensure events that modify date and time information are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.259" endtime="20210502 10:05:48.260"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.260" level="INFO">Executing command 'grep time-change /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.284" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.284" level="INFO">${output} = /etc/audit/rules.d/time-change.rules:-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
/etc/audit/rules.d/time-change.rules:-a always,exit -F arch=b64 -S clock_settime -k time-chan...</msg>
<status status="PASS" starttime="20210502 10:05:48.260" endtime="20210502 10:05:48.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.284" endtime="20210502 10:05:48.284"></status>
</kw>
<tags>
<tag>4-1-10 Ensure events that modify date and time information are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.203" endtime="20210502 10:05:48.284" critical="yes"></status>
</test>
<test id="s1-t92" name="BASElINE_4-1-11">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-11.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.302" level="INFO">${TAG} = ['4-1-11 Ensure events that modify the system Mandatory Access Controls are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.285" endtime="20210502 10:05:48.302"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-11.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.321" level="INFO">${AUDIT} = ['grep MAC-policy /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.302" endtime="20210502 10:05:48.321"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-11.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.340" level="INFO">${RESULT} = ['-p wa -k MAC-policy']</msg>
<status status="PASS" starttime="20210502 10:05:48.321" endtime="20210502 10:05:48.340"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.340" level="INFO">Set tag '4-1-11 Ensure events that modify the system Mandatory Access Controls are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.340" endtime="20210502 10:05:48.340"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.341" level="INFO">Executing command 'grep MAC-policy /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.354" level="INFO">${output} = /etc/audit/rules.d/MAC-policy.rules:-w /etc/selinux/ -p wa -k MAC-policy
/etc/audit/rules.d/MAC-policy.rules:-w /usr/share/selinux/ -p wa -k MAC-policy</msg>
<status status="PASS" starttime="20210502 10:05:48.340" endtime="20210502 10:05:48.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.354" endtime="20210502 10:05:48.355"></status>
</kw>
<tags>
<tag>4-1-11 Ensure events that modify the system Mandatory Access Controls are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.284" endtime="20210502 10:05:48.355" critical="yes"></status>
</test>
<test id="s1-t93" name="BASElINE_4-1-12">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-12.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.374" level="INFO">${TAG} = ['4-1-12 Ensure events that modify the system network environment are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.356" endtime="20210502 10:05:48.374"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-12.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.391" level="INFO">${AUDIT} = ['grep system-locale /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.374" endtime="20210502 10:05:48.391"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-12.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.413" level="INFO">${RESULT} = ['arch=b64 -S sethostname -S setdomainname -k system-locale']</msg>
<status status="PASS" starttime="20210502 10:05:48.391" endtime="20210502 10:05:48.413"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.413" level="INFO">Set tag '4-1-12 Ensure events that modify the system network environment are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.413" endtime="20210502 10:05:48.413"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.413" level="INFO">Executing command 'grep system-locale /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.426" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.426" level="INFO">${output} = /etc/audit/rules.d/system-locale.rules:-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
/etc/audit/rules.d/system-locale.rules:-a always,exit -F arch=b32 -S sethostname -S s...</msg>
<status status="PASS" starttime="20210502 10:05:48.413" endtime="20210502 10:05:48.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.427" endtime="20210502 10:05:48.427"></status>
</kw>
<tags>
<tag>4-1-12 Ensure events that modify the system network environment are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.355" endtime="20210502 10:05:48.427" critical="yes"></status>
</test>
<test id="s1-t94" name="BASElINE_4-1-13">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-13.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.446" level="INFO">${TAG} = ['4-1-13 Ensure discretionary access control permission modification are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.427" endtime="20210502 10:05:48.446"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-13.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.465" level="INFO">${AUDIT} = ['grep perm_mod /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.447" endtime="20210502 10:05:48.465"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-13.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.485" level="INFO">${RESULT} = ['auid&gt;=1000 -F auid!=4294967295 -k perm_mod']</msg>
<status status="PASS" starttime="20210502 10:05:48.465" endtime="20210502 10:05:48.485"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.485" level="INFO">Set tag '4-1-13 Ensure discretionary access control permission modification are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.485" endtime="20210502 10:05:48.485"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.486" level="INFO">Executing command 'grep perm_mod /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.499" level="INFO">${output} = /etc/audit/rules.d/perm_mod.rules:auid!=4294967295 -k perm_mod
/etc/audit/rules.d/perm_mod.rules:auid!=4294967295 -k perm_mod
/etc/audit/rules.d/perm_mod.rules:auid&gt;=1000 -F auid!=4294967295 -k perm_m...</msg>
<status status="PASS" starttime="20210502 10:05:48.485" endtime="20210502 10:05:48.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.499" endtime="20210502 10:05:48.499"></status>
</kw>
<tags>
<tag>4-1-13 Ensure discretionary access control permission modification are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.427" endtime="20210502 10:05:48.499" critical="yes"></status>
</test>
<test id="s1-t95" name="BASElINE_4-1-14">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-14.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.519" level="INFO">${TAG} = ['4-1-14 Ensure events that modify user/group information are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.501" endtime="20210502 10:05:48.519"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-14.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.540" level="INFO">${AUDIT} = ['grep identity /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.519" endtime="20210502 10:05:48.540"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-14.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.559" level="INFO">${RESULT} = ['group -p wa -k identity']</msg>
<status status="PASS" starttime="20210502 10:05:48.540" endtime="20210502 10:05:48.559"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.560" level="INFO">Set tag '4-1-14 Ensure events that modify user/group information are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.559" endtime="20210502 10:05:48.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.560" level="INFO">Executing command 'grep identity /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.583" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.583" level="INFO">${output} = /etc/audit/rules.d/identity.rules:-w /etc/group -p wa -k identity
/etc/audit/rules.d/identity.rules:-w /etc/passwd -p wa -k identity
/etc/audit/rules.d/identity.rules:-w /etc/gshadow -p wa -k identity...</msg>
<status status="PASS" starttime="20210502 10:05:48.560" endtime="20210502 10:05:48.583"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.584" endtime="20210502 10:05:48.585"></status>
</kw>
<tags>
<tag>4-1-14 Ensure events that modify user/group information are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.500" endtime="20210502 10:05:48.585" critical="yes"></status>
</test>
<test id="s1-t96" name="BASElINE_4-1-15">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-15.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.603" level="INFO">${TAG} = ['4-1-15 Ensure successful file system mounts are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.585" endtime="20210502 10:05:48.603"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-15.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.621" level="INFO">${AUDIT} = ['grep mounts /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.603" endtime="20210502 10:05:48.621"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-15.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.655" level="INFO">${RESULT} = ['-a always,exit -F arch=b64 -S mount -F auid&gt;=1000 -F auid!=4294967295 -k  mounts']</msg>
<status status="PASS" starttime="20210502 10:05:48.621" endtime="20210502 10:05:48.655"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.656" level="INFO">Set tag '4-1-15 Ensure successful file system mounts are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.655" endtime="20210502 10:05:48.656"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.656" level="INFO">Executing command 'grep mounts /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.680" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.680" level="INFO">${output} = /etc/audit/rules.d/mounts.rules:-a always,exit -F arch=b64 -S mount -F auid&gt;=1000 -F auid!=4294967295 -k  mounts
/etc/audit/rules.d/mounts.rules:-a always,exit -F arch=b32 -S mount -F auid&gt;=1000 -F au...</msg>
<status status="PASS" starttime="20210502 10:05:48.656" endtime="20210502 10:05:48.680"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.680" endtime="20210502 10:05:48.680"></status>
</kw>
<tags>
<tag>4-1-15 Ensure successful file system mounts are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.585" endtime="20210502 10:05:48.680" critical="yes"></status>
</test>
<test id="s1-t97" name="BASElINE_4-1-16">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-16.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.698" level="INFO">${TAG} = ['4-1-16 Ensure file deletion events by users are collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.681" endtime="20210502 10:05:48.698"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-16.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.717" level="INFO">${AUDIT} = ['grep delete /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.698" endtime="20210502 10:05:48.717"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-16.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.737" level="INFO">${RESULT} = ['auid&gt;=1000 -F auid!=4294967295 -k delete']</msg>
<status status="PASS" starttime="20210502 10:05:48.718" endtime="20210502 10:05:48.737"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.738" level="INFO">Set tag '4-1-16 Ensure file deletion events by users are collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.737" endtime="20210502 10:05:48.739"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.739" level="INFO">Executing command 'grep delete /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.764" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.764" level="INFO">${output} = /etc/audit/rules.d/audit.rules:## First rule - delete all
/etc/audit/rules.d/delete.rules:-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid&gt;=1000 -F auid!=4294967295 -k de...</msg>
<status status="PASS" starttime="20210502 10:05:48.739" endtime="20210502 10:05:48.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.764" endtime="20210502 10:05:48.764"></status>
</kw>
<tags>
<tag>4-1-16 Ensure file deletion events by users are collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.681" endtime="20210502 10:05:48.764" critical="yes"></status>
</test>
<test id="s1-t98" name="BASElINE_4-1-17">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-17.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.784" level="INFO">${TAG} = ['4-1-17 Ensure kernel module loading and unloading is collected ']</msg>
<status status="PASS" starttime="20210502 10:05:48.765" endtime="20210502 10:05:48.784"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-17.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.802" level="INFO">${AUDIT} = ['grep modules /etc/audit/rules.d/*.rules']</msg>
<status status="PASS" starttime="20210502 10:05:48.784" endtime="20210502 10:05:48.802"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-1-17.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.821" level="INFO">${RESULT} = [' always,exit -F arch=b64 -S init_module -S']</msg>
<status status="PASS" starttime="20210502 10:05:48.802" endtime="20210502 10:05:48.821"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.822" level="INFO">Set tag '4-1-17 Ensure kernel module loading and unloading is collected '.</msg>
<status status="PASS" starttime="20210502 10:05:48.821" endtime="20210502 10:05:48.822"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.822" level="INFO">Executing command 'grep modules /etc/audit/rules.d/*.rules'.</msg>
<msg timestamp="20210502 10:05:48.835" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:48.835" level="INFO">${output} = /etc/audit/rules.d/modules.rules:-w /sbin/insmod -p x -k modules
/etc/audit/rules.d/modules.rules:-w /sbin/rmmod -p x -k modules
/etc/audit/rules.d/modules.rules:-w /sbin/modprobe -p x -k modules
/etc...</msg>
<status status="PASS" starttime="20210502 10:05:48.822" endtime="20210502 10:05:48.835"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:48.835" endtime="20210502 10:05:48.836"></status>
</kw>
<tags>
<tag>4-1-17 Ensure kernel module loading and unloading is collected </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.764" endtime="20210502 10:05:48.836" critical="yes"></status>
</test>
<test id="s1-t99" name="BASElINE_4-2-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:48.855" level="INFO">${TAG} = ['4-2-1 Ensure rsyslog is installed ']</msg>
<status status="PASS" starttime="20210502 10:05:48.837" endtime="20210502 10:05:48.855"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:48.874" level="INFO">${AUDIT} = ['rpm -q rsyslog']</msg>
<status status="PASS" starttime="20210502 10:05:48.855" endtime="20210502 10:05:48.874"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:48.893" level="INFO">${RESULT} = ['rsyslog-8.1911']</msg>
<status status="PASS" starttime="20210502 10:05:48.874" endtime="20210502 10:05:48.893"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:48.893" level="INFO">Set tag '4-2-1 Ensure rsyslog is installed '.</msg>
<status status="PASS" starttime="20210502 10:05:48.893" endtime="20210502 10:05:48.893"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:48.893" level="INFO">Executing command 'rpm -q rsyslog'.</msg>
<msg timestamp="20210502 10:05:49.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.021" level="INFO">${output} = rsyslog-8.1911.0-3.el8.x86_64</msg>
<status status="PASS" starttime="20210502 10:05:48.893" endtime="20210502 10:05:49.021"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.021" endtime="20210502 10:05:49.022"></status>
</kw>
<tags>
<tag>4-2-1 Ensure rsyslog is installed </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:48.836" endtime="20210502 10:05:49.023" critical="yes"></status>
</test>
<test id="s1-t100" name="BASElINE_4-2-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.058" level="INFO">${TAG} = ['4-2-2 Ensure rsyslog Service is enabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.024" endtime="20210502 10:05:49.058"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.077" level="INFO">${AUDIT} = ['systemctl is-enabled rsyslog']</msg>
<status status="PASS" starttime="20210502 10:05:49.058" endtime="20210502 10:05:49.078"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_4-2-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.096" level="INFO">${RESULT} = ['enabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.078" endtime="20210502 10:05:49.096"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.097" level="INFO">Set tag '4-2-2 Ensure rsyslog Service is enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:49.096" endtime="20210502 10:05:49.097"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.097" level="INFO">Executing command 'systemctl is-enabled rsyslog'.</msg>
<msg timestamp="20210502 10:05:49.121" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.121" level="INFO">${output} = enabled</msg>
<status status="PASS" starttime="20210502 10:05:49.097" endtime="20210502 10:05:49.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.121" endtime="20210502 10:05:49.122"></status>
</kw>
<tags>
<tag>4-2-2 Ensure rsyslog Service is enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.023" endtime="20210502 10:05:49.122" critical="yes"></status>
</test>
<test id="s1-t101" name="BASElINE_5-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.141" level="INFO">${TAG} = ['5-1-1 Ensure permissions on /etc/ssh/sshd_config are configured']</msg>
<status status="PASS" starttime="20210502 10:05:49.122" endtime="20210502 10:05:49.141"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.160" level="INFO">${AUDIT} = ['stat /etc/ssh/sshd_config']</msg>
<status status="PASS" starttime="20210502 10:05:49.141" endtime="20210502 10:05:49.160"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.179" level="INFO">${RESULT} = ['Access: (0600/-rw-------)']</msg>
<status status="PASS" starttime="20210502 10:05:49.160" endtime="20210502 10:05:49.179"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.179" level="INFO">Set tag '5-1-1 Ensure permissions on /etc/ssh/sshd_config are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:49.179" endtime="20210502 10:05:49.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.180" level="INFO">Executing command 'stat /etc/ssh/sshd_config'.</msg>
<msg timestamp="20210502 10:05:49.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.203" level="INFO">${output} =   File: /etc/ssh/sshd_config
  Size: 4426      	Blocks: 16         IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 50750595    Links: 1
Access: (0600/-rw-------)  Uid: (    0/    root)   Gid...</msg>
<status status="PASS" starttime="20210502 10:05:49.180" endtime="20210502 10:05:49.203"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.204" endtime="20210502 10:05:49.204"></status>
</kw>
<tags>
<tag>5-1-1 Ensure permissions on /etc/ssh/sshd_config are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.122" endtime="20210502 10:05:49.204" critical="yes"></status>
</test>
<test id="s1-t102" name="BASElINE_5-1-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.223" level="INFO">${TAG} = ['5-1-2 Ensure SSH LogLevel is appropriate']</msg>
<status status="PASS" starttime="20210502 10:05:49.204" endtime="20210502 10:05:49.223"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.243" level="INFO">${AUDIT} = ['sshd -T | grep loglevel']</msg>
<status status="PASS" starttime="20210502 10:05:49.223" endtime="20210502 10:05:49.243"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.262" level="INFO">${RESULT} = ['loglevel INFO']</msg>
<status status="PASS" starttime="20210502 10:05:49.243" endtime="20210502 10:05:49.262"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.262" level="INFO">Set tag '5-1-2 Ensure SSH LogLevel is appropriate'.</msg>
<status status="PASS" starttime="20210502 10:05:49.262" endtime="20210502 10:05:49.262"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.263" level="INFO">Executing command 'sshd -T | grep loglevel'.</msg>
<msg timestamp="20210502 10:05:49.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.286" level="INFO">${output} = loglevel INFO</msg>
<status status="PASS" starttime="20210502 10:05:49.263" endtime="20210502 10:05:49.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.286" endtime="20210502 10:05:49.286"></status>
</kw>
<tags>
<tag>5-1-2 Ensure SSH LogLevel is appropriate</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.204" endtime="20210502 10:05:49.286" critical="yes"></status>
</test>
<test id="s1-t103" name="BASElINE_5-1-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.306" level="INFO">${TAG} = ['5-1-3 Ensure SSH X11 forwarding is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.287" endtime="20210502 10:05:49.306"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.324" level="INFO">${AUDIT} = ['sshd -T | grep x11forwarding']</msg>
<status status="PASS" starttime="20210502 10:05:49.306" endtime="20210502 10:05:49.324"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.345" level="INFO">${RESULT} = ['x11forwarding no']</msg>
<status status="PASS" starttime="20210502 10:05:49.324" endtime="20210502 10:05:49.345"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.346" level="INFO">Set tag '5-1-3 Ensure SSH X11 forwarding is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:49.345" endtime="20210502 10:05:49.346"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.346" level="INFO">Executing command 'sshd -T | grep x11forwarding'.</msg>
<msg timestamp="20210502 10:05:49.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.370" level="INFO">${output} = x11forwarding no</msg>
<status status="PASS" starttime="20210502 10:05:49.346" endtime="20210502 10:05:49.370"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.370" endtime="20210502 10:05:49.370"></status>
</kw>
<tags>
<tag>5-1-3 Ensure SSH X11 forwarding is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.286" endtime="20210502 10:05:49.370" critical="yes"></status>
</test>
<test id="s1-t104" name="BASElINE_5-1-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.390" level="INFO">${TAG} = ['5-1-4 Ensure SSH MaxAuthTries is set to 4 or less']</msg>
<status status="PASS" starttime="20210502 10:05:49.372" endtime="20210502 10:05:49.390"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.408" level="INFO">${AUDIT} = ['sshd -T | grep maxauthtries']</msg>
<status status="PASS" starttime="20210502 10:05:49.390" endtime="20210502 10:05:49.409"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.427" level="INFO">${RESULT} = ['maxauthtries 3']</msg>
<status status="PASS" starttime="20210502 10:05:49.409" endtime="20210502 10:05:49.427"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.427" level="INFO">Set tag '5-1-4 Ensure SSH MaxAuthTries is set to 4 or less'.</msg>
<status status="PASS" starttime="20210502 10:05:49.427" endtime="20210502 10:05:49.427"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.428" level="INFO">Executing command 'sshd -T | grep maxauthtries'.</msg>
<msg timestamp="20210502 10:05:49.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.452" level="INFO">${output} = maxauthtries 3</msg>
<status status="PASS" starttime="20210502 10:05:49.427" endtime="20210502 10:05:49.452"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.453" endtime="20210502 10:05:49.453"></status>
</kw>
<tags>
<tag>5-1-4 Ensure SSH MaxAuthTries is set to 4 or less</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.371" endtime="20210502 10:05:49.453" critical="yes"></status>
</test>
<test id="s1-t105" name="BASElINE_5-1-5">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-5.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.472" level="INFO">${TAG} = ['5-1-5 Ensure SSH IgnoreRhosts is enabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.453" endtime="20210502 10:05:49.472"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-5.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.491" level="INFO">${AUDIT} = ['sshd -T | grep ignorerhosts']</msg>
<status status="PASS" starttime="20210502 10:05:49.472" endtime="20210502 10:05:49.491"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-5.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.512" level="INFO">${RESULT} = ['ignorerhosts yes']</msg>
<status status="PASS" starttime="20210502 10:05:49.491" endtime="20210502 10:05:49.512"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.513" level="INFO">Set tag '5-1-5 Ensure SSH IgnoreRhosts is enabled'.</msg>
<status status="PASS" starttime="20210502 10:05:49.512" endtime="20210502 10:05:49.513"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.513" level="INFO">Executing command 'sshd -T | grep ignorerhosts'.</msg>
<msg timestamp="20210502 10:05:49.536" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.536" level="INFO">${output} = ignorerhosts yes</msg>
<status status="PASS" starttime="20210502 10:05:49.513" endtime="20210502 10:05:49.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.536" endtime="20210502 10:05:49.536"></status>
</kw>
<tags>
<tag>5-1-5 Ensure SSH IgnoreRhosts is enabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.453" endtime="20210502 10:05:49.536" critical="yes"></status>
</test>
<test id="s1-t106" name="BASElINE_5-1-6">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-6.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.557" level="INFO">${TAG} = ['5-1-6 Ensure SSH PermitEmptyPasswords is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.538" endtime="20210502 10:05:49.557"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-6.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.576" level="INFO">${AUDIT} = ['sshd -T | grep permitemptypasswords']</msg>
<status status="PASS" starttime="20210502 10:05:49.557" endtime="20210502 10:05:49.576"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-6.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.595" level="INFO">${RESULT} = ['permitemptypasswords no']</msg>
<status status="PASS" starttime="20210502 10:05:49.576" endtime="20210502 10:05:49.595"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.595" level="INFO">Set tag '5-1-6 Ensure SSH PermitEmptyPasswords is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:49.595" endtime="20210502 10:05:49.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.596" level="INFO">Executing command 'sshd -T | grep permitemptypasswords'.</msg>
<msg timestamp="20210502 10:05:49.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.619" level="INFO">${output} = permitemptypasswords no</msg>
<status status="PASS" starttime="20210502 10:05:49.595" endtime="20210502 10:05:49.619"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.620" endtime="20210502 10:05:49.620"></status>
</kw>
<tags>
<tag>5-1-6 Ensure SSH PermitEmptyPasswords is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.536" endtime="20210502 10:05:49.620" critical="yes"></status>
</test>
<test id="s1-t107" name="BASElINE_5-1-7">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-7.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.641" level="INFO">${TAG} = ['5-1-7 Ensure SSH LoginGraceTime is set to one minute or less']</msg>
<status status="PASS" starttime="20210502 10:05:49.621" endtime="20210502 10:05:49.641"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-7.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.661" level="INFO">${AUDIT} = ['sshd -T | grep logingracetime']</msg>
<status status="PASS" starttime="20210502 10:05:49.641" endtime="20210502 10:05:49.661"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-7.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.682" level="INFO">${RESULT} = ['logingracetime 60']</msg>
<status status="PASS" starttime="20210502 10:05:49.661" endtime="20210502 10:05:49.682"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.682" level="INFO">Set tag '5-1-7 Ensure SSH LoginGraceTime is set to one minute or less'.</msg>
<status status="PASS" starttime="20210502 10:05:49.682" endtime="20210502 10:05:49.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.683" level="INFO">Executing command 'sshd -T | grep logingracetime'.</msg>
<msg timestamp="20210502 10:05:49.707" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.707" level="INFO">${output} = logingracetime 60</msg>
<status status="PASS" starttime="20210502 10:05:49.683" endtime="20210502 10:05:49.707"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.707" endtime="20210502 10:05:49.707"></status>
</kw>
<tags>
<tag>5-1-7 Ensure SSH LoginGraceTime is set to one minute or less</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.621" endtime="20210502 10:05:49.707" critical="yes"></status>
</test>
<test id="s1-t108" name="BASElINE_5-1-8">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-8.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.741" level="INFO">${TAG} = ['5-1-8 Ensure SSH AllowTcpForwarding is disabled']</msg>
<status status="PASS" starttime="20210502 10:05:49.708" endtime="20210502 10:05:49.741"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-8.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.759" level="INFO">${AUDIT} = ['sshd -T | grep -i allowtcpforwarding']</msg>
<status status="PASS" starttime="20210502 10:05:49.741" endtime="20210502 10:05:49.759"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-8.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.779" level="INFO">${RESULT} = ['allowtcpforwarding no']</msg>
<status status="PASS" starttime="20210502 10:05:49.759" endtime="20210502 10:05:49.779"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.779" level="INFO">Set tag '5-1-8 Ensure SSH AllowTcpForwarding is disabled'.</msg>
<status status="PASS" starttime="20210502 10:05:49.779" endtime="20210502 10:05:49.779"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.780" level="INFO">Executing command 'sshd -T | grep -i allowtcpforwarding'.</msg>
<msg timestamp="20210502 10:05:49.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.804" level="INFO">${output} = allowtcpforwarding no</msg>
<status status="PASS" starttime="20210502 10:05:49.779" endtime="20210502 10:05:49.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.804" endtime="20210502 10:05:49.804"></status>
</kw>
<tags>
<tag>5-1-8 Ensure SSH AllowTcpForwarding is disabled</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.707" endtime="20210502 10:05:49.804" critical="yes"></status>
</test>
<test id="s1-t109" name="BASElINE_5-1-9">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-9.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.824" level="INFO">${TAG} = ['5-1-9 Ensure SSH MaxSessions is set to 4 or less ']</msg>
<status status="PASS" starttime="20210502 10:05:49.805" endtime="20210502 10:05:49.824"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-9.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.844" level="INFO">${AUDIT} = ['sshd -T | grep -i maxsessions']</msg>
<status status="PASS" starttime="20210502 10:05:49.824" endtime="20210502 10:05:49.844"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-1-9.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.863" level="INFO">${RESULT} = ['maxsessions 4']</msg>
<status status="PASS" starttime="20210502 10:05:49.844" endtime="20210502 10:05:49.863"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.863" level="INFO">Set tag '5-1-9 Ensure SSH MaxSessions is set to 4 or less '.</msg>
<status status="PASS" starttime="20210502 10:05:49.863" endtime="20210502 10:05:49.863"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.863" level="INFO">Executing command 'sshd -T | grep -i maxsessions'.</msg>
<msg timestamp="20210502 10:05:49.887" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.887" level="INFO">${output} = maxsessions 4</msg>
<status status="PASS" starttime="20210502 10:05:49.863" endtime="20210502 10:05:49.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.887" endtime="20210502 10:05:49.888"></status>
</kw>
<tags>
<tag>5-1-9 Ensure SSH MaxSessions is set to 4 or less </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.805" endtime="20210502 10:05:49.888" critical="yes"></status>
</test>
<test id="s1-t110" name="BASElINE_5-2-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.910" level="INFO">${TAG} = ['5-2-1 Ensure password expiration is 365 days or less']</msg>
<status status="PASS" starttime="20210502 10:05:49.888" endtime="20210502 10:05:49.911"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:49.929" level="INFO">${AUDIT} = ['grep PASS_MAX_DAYS /etc/login.defs']</msg>
<status status="PASS" starttime="20210502 10:05:49.911" endtime="20210502 10:05:49.929"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:49.951" level="INFO">${RESULT} = ['365']</msg>
<status status="PASS" starttime="20210502 10:05:49.930" endtime="20210502 10:05:49.951"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:49.952" level="INFO">Set tag '5-2-1 Ensure password expiration is 365 days or less'.</msg>
<status status="PASS" starttime="20210502 10:05:49.951" endtime="20210502 10:05:49.952"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:49.952" level="INFO">Executing command 'grep PASS_MAX_DAYS /etc/login.defs'.</msg>
<msg timestamp="20210502 10:05:49.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:49.966" level="INFO">${output} = #	PASS_MAX_DAYS	Maximum number of days a password may be used.
PASS_MAX_DAYS	365</msg>
<status status="PASS" starttime="20210502 10:05:49.952" endtime="20210502 10:05:49.967"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:49.967" endtime="20210502 10:05:49.967"></status>
</kw>
<tags>
<tag>5-2-1 Ensure password expiration is 365 days or less</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.888" endtime="20210502 10:05:49.967" critical="yes"></status>
</test>
<test id="s1-t111" name="BASElINE_5-2-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:49.986" level="INFO">${TAG} = ['5-2-2 Ensure password expiration warning days is 7 or more']</msg>
<status status="PASS" starttime="20210502 10:05:49.968" endtime="20210502 10:05:49.986"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.006" level="INFO">${AUDIT} = ['grep PASS_WARN_AGE /etc/login.defs']</msg>
<status status="PASS" starttime="20210502 10:05:49.986" endtime="20210502 10:05:50.007"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.025" level="INFO">${RESULT} = ['PASS_WARN_AGE 7']</msg>
<status status="PASS" starttime="20210502 10:05:50.007" endtime="20210502 10:05:50.026"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.026" level="INFO">Set tag '5-2-2 Ensure password expiration warning days is 7 or more'.</msg>
<status status="PASS" starttime="20210502 10:05:50.026" endtime="20210502 10:05:50.026"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.027" level="INFO">Executing command 'grep PASS_WARN_AGE /etc/login.defs'.</msg>
<msg timestamp="20210502 10:05:50.050" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.050" level="INFO">${output} = #	PASS_WARN_AGE	Number of days warning given before a password expires.
PASS_WARN_AGE 7</msg>
<status status="PASS" starttime="20210502 10:05:50.027" endtime="20210502 10:05:50.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.050" endtime="20210502 10:05:50.051"></status>
</kw>
<tags>
<tag>5-2-2 Ensure password expiration warning days is 7 or more</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:49.968" endtime="20210502 10:05:50.051" critical="yes"></status>
</test>
<test id="s1-t112" name="BASElINE_5-2-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.069" level="INFO">${TAG} = ['5-2-3 Ensure default group for the root account is GID 0']</msg>
<status status="PASS" starttime="20210502 10:05:50.052" endtime="20210502 10:05:50.069"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.087" level="INFO">${AUDIT} = ['grep "^root:" /etc/passwd | cut -f4 -d:']</msg>
<status status="PASS" starttime="20210502 10:05:50.069" endtime="20210502 10:05:50.088"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_5-2-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.109" level="INFO">${RESULT} = ['0']</msg>
<status status="PASS" starttime="20210502 10:05:50.088" endtime="20210502 10:05:50.109"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.110" level="INFO">Set tag '5-2-3 Ensure default group for the root account is GID 0'.</msg>
<status status="PASS" starttime="20210502 10:05:50.109" endtime="20210502 10:05:50.110"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.110" level="INFO">Executing command 'grep "^root:" /etc/passwd | cut -f4 -d:'.</msg>
<msg timestamp="20210502 10:05:50.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.230" level="INFO">${output} = 0</msg>
<status status="PASS" starttime="20210502 10:05:50.110" endtime="20210502 10:05:50.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.231" endtime="20210502 10:05:50.231"></status>
</kw>
<tags>
<tag>5-2-3 Ensure default group for the root account is GID 0</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.051" endtime="20210502 10:05:50.232" critical="yes"></status>
</test>
<test id="s1-t113" name="BASElINE_6-1-1">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-1.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.282" level="INFO">${TAG} = ['6-1-1 Ensure permissions on /etc/passwd are configured']</msg>
<status status="PASS" starttime="20210502 10:05:50.233" endtime="20210502 10:05:50.282"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-1.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.302" level="INFO">${AUDIT} = ['stat /etc/passwd']</msg>
<status status="PASS" starttime="20210502 10:05:50.283" endtime="20210502 10:05:50.302"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-1.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.323" level="INFO">${RESULT} = ['Access: (0644/-rw-r--r--)']</msg>
<status status="PASS" starttime="20210502 10:05:50.302" endtime="20210502 10:05:50.323"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.323" level="INFO">Set tag '6-1-1 Ensure permissions on /etc/passwd are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:50.323" endtime="20210502 10:05:50.323"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.324" level="INFO">Executing command 'stat /etc/passwd'.</msg>
<msg timestamp="20210502 10:05:50.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.347" level="INFO">${output} =   File: /etc/passwd
  Size: 1575      	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16789757    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/...</msg>
<status status="PASS" starttime="20210502 10:05:50.324" endtime="20210502 10:05:50.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.347" endtime="20210502 10:05:50.347"></status>
</kw>
<tags>
<tag>6-1-1 Ensure permissions on /etc/passwd are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.233" endtime="20210502 10:05:50.347" critical="yes"></status>
</test>
<test id="s1-t114" name="BASElINE_6-1-2">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-2.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.366" level="INFO">${TAG} = ['6-1-2 Ensure permissions on /etc/shadow are configured']</msg>
<status status="PASS" starttime="20210502 10:05:50.348" endtime="20210502 10:05:50.366"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-2.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.384" level="INFO">${AUDIT} = ['stat /etc/shadow']</msg>
<status status="PASS" starttime="20210502 10:05:50.366" endtime="20210502 10:05:50.385"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-2.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.404" level="INFO">${RESULT} = ['Access: (0000/----------)']</msg>
<status status="PASS" starttime="20210502 10:05:50.385" endtime="20210502 10:05:50.404"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.405" level="INFO">Set tag '6-1-2 Ensure permissions on /etc/shadow are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:50.404" endtime="20210502 10:05:50.405"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.405" level="INFO">Executing command 'stat /etc/shadow'.</msg>
<msg timestamp="20210502 10:05:50.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.428" level="INFO">${output} =   File: /etc/shadow
  Size: 966       	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16786861    Links: 1
Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0/...</msg>
<status status="PASS" starttime="20210502 10:05:50.405" endtime="20210502 10:05:50.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.428" endtime="20210502 10:05:50.429"></status>
</kw>
<tags>
<tag>6-1-2 Ensure permissions on /etc/shadow are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.347" endtime="20210502 10:05:50.429" critical="yes"></status>
</test>
<test id="s1-t115" name="BASElINE_6-1-3">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-3.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.448" level="INFO">${TAG} = ['6-1-3 Ensure permissions on /etc/group are configured']</msg>
<status status="PASS" starttime="20210502 10:05:50.429" endtime="20210502 10:05:50.448"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-3.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.466" level="INFO">${AUDIT} = ['stat /etc/group']</msg>
<status status="PASS" starttime="20210502 10:05:50.448" endtime="20210502 10:05:50.466"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-3.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.487" level="INFO">${RESULT} = ['Access: (0644/-rw-r--r--)']</msg>
<status status="PASS" starttime="20210502 10:05:50.466" endtime="20210502 10:05:50.487"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.487" level="INFO">Set tag '6-1-3 Ensure permissions on /etc/group are configured'.</msg>
<status status="PASS" starttime="20210502 10:05:50.487" endtime="20210502 10:05:50.487"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.487" level="INFO">Executing command 'stat /etc/group'.</msg>
<msg timestamp="20210502 10:05:50.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.511" level="INFO">${output} =   File: /etc/group
  Size: 648       	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16790052    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/ ...</msg>
<status status="PASS" starttime="20210502 10:05:50.487" endtime="20210502 10:05:50.511"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.512" endtime="20210502 10:05:50.512"></status>
</kw>
<tags>
<tag>6-1-3 Ensure permissions on /etc/group are configured</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.429" endtime="20210502 10:05:50.512" critical="yes"></status>
</test>
<test id="s1-t116" name="BASElINE_6-1-4">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-4.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.532" level="INFO">${TAG} = ['6-1-4 Ensure permissions on /etc/gshadow are configured ']</msg>
<status status="PASS" starttime="20210502 10:05:50.513" endtime="20210502 10:05:50.532"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-4.AUDIT</arg>
</arguments>
<assign>
<var>${AUDIT}</var>
</assign>
<msg timestamp="20210502 10:05:50.552" level="INFO">${AUDIT} = ['stat /etc/gshadow']</msg>
<status status="PASS" starttime="20210502 10:05:50.532" endtime="20210502 10:05:50.552"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.BASELINE_6-1-4.RESULT</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20210502 10:05:50.571" level="INFO">${RESULT} = ['Access: (0000/----------)']</msg>
<status status="PASS" starttime="20210502 10:05:50.552" endtime="20210502 10:05:50.571"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:05:50.572" level="INFO">Set tag '6-1-4 Ensure permissions on /etc/gshadow are configured '.</msg>
<status status="PASS" starttime="20210502 10:05:50.572" endtime="20210502 10:05:50.572"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${AUDIT[0]}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210502 10:05:50.573" level="INFO">Executing command 'stat /etc/gshadow'.</msg>
<msg timestamp="20210502 10:05:50.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210502 10:05:50.596" level="INFO">${output} =   File: /etc/gshadow
  Size: 516       	Blocks: 8          IO Block: 4096   regular file
Device: fd01h/64769d	Inode: 16789759    Links: 1
Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0...</msg>
<status status="PASS" starttime="20210502 10:05:50.573" endtime="20210502 10:05:50.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${RESULT[0]}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:05:50.596" endtime="20210502 10:05:50.596"></status>
</kw>
<tags>
<tag>6-1-4 Ensure permissions on /etc/gshadow are configured </tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.513" endtime="20210502 10:05:50.596" critical="yes"></status>
</test>
<test id="s1-t117" name="Send Email notification">
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Email_Receiver.TAG</arg>
</arguments>
<assign>
<var>${TAG}</var>
</assign>
<msg timestamp="20210502 10:05:50.615" level="INFO">${TAG} = ['Email notification']</msg>
<status status="PASS" starttime="20210502 10:05:50.597" endtime="20210502 10:05:50.616"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Email_Receiver.FROM</arg>
</arguments>
<assign>
<var>${FROM}</var>
</assign>
<msg timestamp="20210502 10:05:50.636" level="INFO">${FROM} = ['ptmsmut@gmail.com']</msg>
<status status="PASS" starttime="20210502 10:05:50.616" endtime="20210502 10:05:50.636"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Email_Receiver.TO</arg>
</arguments>
<assign>
<var>${TO}</var>
</assign>
<msg timestamp="20210502 10:05:50.655" level="INFO">${TO} = ['6217810010@mutacth.com']</msg>
<status status="PASS" starttime="20210502 10:05:50.636" endtime="20210502 10:05:50.655"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${json_obj}</arg>
<arg>$.Email_Receiver.SUBJECT</arg>
</arguments>
<assign>
<var>${SUBJECT}</var>
</assign>
<msg timestamp="20210502 10:05:50.675" level="INFO">${SUBJECT} = ['Completed Audit Baseline Test Please check Test report.!!!!']</msg>
<status status="PASS" starttime="20210502 10:05:50.655" endtime="20210502 10:05:50.675"></status>
</kw>
<kw name="Send Message" library="!IS2-1-Python-SendEmail-fromRobot">
<arguments>
<arg>${FROM[0]}</arg>
<arg>${TO[0]}</arg>
<arg>${Subject[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20210502 10:06:00.158" level="INFO">${result} = Send Completed</msg>
<status status="PASS" starttime="20210502 10:05:50.675" endtime="20210502 10:06:00.159"></status>
</kw>
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>${TAG[0]}</arg>
</arguments>
<msg timestamp="20210502 10:06:00.160" level="INFO">Set tag 'Email notification'.</msg>
<status status="PASS" starttime="20210502 10:06:00.159" endtime="20210502 10:06:00.160"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" starttime="20210502 10:06:00.161" endtime="20210502 10:06:00.162"></status>
</kw>
<tags>
<tag>Email notification</tag>
</tags>
<status status="PASS" starttime="20210502 10:05:50.596" endtime="20210502 10:06:00.162" critical="yes"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20210502 10:06:00.168" endtime="20210502 10:06:00.170"></status>
</kw>
<doc>Security Baseline Template Version :CentOS-8_10FEB2021_Ver2.0: OS :CentOS 8: Hostname DataBase Server1 IP Address 192.168.20.30</doc>
<status status="PASS" starttime="20210502 10:05:36.632" endtime="20210502 10:06:00.170"></status>
</suite>
<statistics>
<total>
<stat pass="117" fail="0">Critical Tests</stat>
<stat pass="117" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">(1-1-1) Ensure mounting of cramfs filesystems is disabled</stat>
<stat pass="1" fail="0">(1-1-2) Ensure mounting of squashfs filesystems is disabled</stat>
<stat pass="1" fail="0">(1-1-3) Ensure mounting of udf filesystems is disabled</stat>
<stat pass="1" fail="0">(1-1-4) Ensure nodev option set on /tmp partition</stat>
<stat pass="1" fail="0">(1-1-5) Ensure nosuid option set on /tmp partition</stat>
<stat pass="1" fail="0">(1-1-6) Ensure noexec option set on /tmp partition</stat>
<stat pass="1" fail="0">(1-1-7) Ensure nodev option set on /var/tmp partition</stat>
<stat pass="1" fail="0">(1-1-8) Ensure nosuid option set on /var/tmp partition</stat>
<stat pass="1" fail="0">(1-1-9) Ensure noexec option set on /var/tmp partition</stat>
<stat pass="1" fail="0">1-1-10 Ensure nodev option set on /home partition</stat>
<stat pass="1" fail="0">1-1-11 Ensure nodev option set on /dev/shm partition</stat>
<stat pass="1" fail="0">1-1-12 Ensure nosuid option set on /dev/shm partition</stat>
<stat pass="1" fail="0">1-1-13 Ensure noexec option set on /dev/shm partition</stat>
<stat pass="1" fail="0">1-1-14 Disable Automounting</stat>
<stat pass="1" fail="0">1-2-1 Ensure gpgcheck is globally activated</stat>
<stat pass="1" fail="0">1-2-2 Ensure package manager repositories are configured</stat>
<stat pass="1" fail="0">1-3-1 Ensure sudo is installed</stat>
<stat pass="1" fail="0">1-4-1 Ensure AIDE is installed</stat>
<stat pass="1" fail="0">1-4-2 Ensure filesystem integrity is regularly checked</stat>
<stat pass="1" fail="0">1-5-1 Ensure permissions on bootloader config are configured</stat>
<stat pass="1" fail="0">1-5-2 Ensure bootloader password is set</stat>
<stat pass="1" fail="0">1-5-3 Ensure authentication required for single user mode</stat>
<stat pass="1" fail="0">1-6-1 Ensure core dumps are restricted</stat>
<stat pass="1" fail="0">1-6-2 Ensure address space layout randomization (ASLR) is enabled</stat>
<stat pass="1" fail="0">1-7-1 Ensure SELinux is installed</stat>
<stat pass="1" fail="0">1-7-2 Ensure SELinux policy is configured</stat>
<stat pass="1" fail="0">1-7-3 Ensure the SELinux state is enforcing</stat>
<stat pass="1" fail="0">1-7-4 Ensure SETroubleshoot is not installed</stat>
<stat pass="1" fail="0">1-7-5 Ensure the MCS Translation Service (mcstrans) is not installed</stat>
<stat pass="1" fail="0">1-8-1 Ensure message of the day is configured properly</stat>
<stat pass="1" fail="0">1-8-2 Ensure local login warning banner is configured properly</stat>
<stat pass="1" fail="0">1-8-3 Ensure permissions on /etc/motd are configured</stat>
<stat pass="1" fail="0">1-8-4 Ensure permissions on /etc/issue are configured</stat>
<stat pass="1" fail="0">1-8-5 Ensure permissions on /etc/issue.net are configured</stat>
<stat pass="1" fail="0">1-8-6 Ensure system-wide crypto policy is FUTURE or FIPS</stat>
<stat pass="1" fail="0">2-1-1 Ensure xinetd is not installed</stat>
<stat pass="1" fail="0">2-2-10 Ensure FTP Server is not enabled</stat>
<stat pass="1" fail="0">2-2-11 Ensure DNS Server is not enabled</stat>
<stat pass="1" fail="0">2-2-12 Ensure NFS is not enabled</stat>
<stat pass="1" fail="0">2-2-13 Ensure RPC is not enabled</stat>
<stat pass="1" fail="0">2-2-14 Ensure LDAP server is not enabled</stat>
<stat pass="1" fail="0">2-2-15 Ensure DHCP Server is not enabled</stat>
<stat pass="1" fail="0">2-2-16 Ensure CUPS is not enabled (Scored)</stat>
<stat pass="1" fail="0">2-2-17 Ensure NIS Server is not enabled (Scored)</stat>
<stat pass="1" fail="0">2-2-18 Ensure mail transfer agent is configured for local-only mode</stat>
<stat pass="1" fail="0">2-2-1 Ensure time synchronization is in use</stat>
<stat pass="1" fail="0">2-2-2 Ensure chrony is configured</stat>
<stat pass="1" fail="0">2-2-3 Ensure rsync service is not enabled</stat>
<stat pass="1" fail="0">2-2-4 Ensure Avahi Server is not enabled</stat>
<stat pass="1" fail="0">2-2-5 Ensure SNMP Server is not enabled</stat>
<stat pass="1" fail="0">2-2-6 Ensure HTTP Proxy Server is not enabled</stat>
<stat pass="1" fail="0">2-2-7 Ensure Samba is not enabled</stat>
<stat pass="1" fail="0">2-2-8 Ensure IMAP and POP3 server is not enabled</stat>
<stat pass="1" fail="0">2-2-9 Ensure HTTP server is not enabled</stat>
<stat pass="1" fail="0">2-3-1 Ensure NIS Client is not installed</stat>
<stat pass="1" fail="0">2-3-2 Ensure telnet client is not installed</stat>
<stat pass="1" fail="0">2-3-3 Ensure LDAP client is not installed</stat>
<stat pass="1" fail="0">3-1-1 Ensure IP forwarding is disabled</stat>
<stat pass="1" fail="0">3-1-2 Ensure packet redirect sending is disabled</stat>
<stat pass="1" fail="0">3-2-1 Ensure source routed packets are not accepted</stat>
<stat pass="1" fail="0">3-2-2 Ensure ICMP redirects are not accepted</stat>
<stat pass="1" fail="0">3-2-3 Ensure secure ICMP redirects are not accepted </stat>
<stat pass="1" fail="0">3-2-4 Ensure suspicious packets are logged </stat>
<stat pass="1" fail="0">3-2-5 Ensure broadcast ICMP requests are ignored </stat>
<stat pass="1" fail="0">3-2-6 Ensure bogus ICMP responses are ignored </stat>
<stat pass="1" fail="0">3-2-7 Ensure Reverse Path Filtering is enabled </stat>
<stat pass="1" fail="0">3-2-8 Ensure TCP SYN Cookies is enabled </stat>
<stat pass="1" fail="0">3-2-9 Ensure IPv6 router advertisements are not accepted </stat>
<stat pass="1" fail="0">3-3-1 Ensure SCTP is disabled </stat>
<stat pass="1" fail="0">3-4-1 Ensure a Firewall package is installed </stat>
<stat pass="1" fail="0">3-4-2 Ensure firewalld service is enabled and running </stat>
<stat pass="1" fail="0">3-4-3 Ensure nftables is not enabled </stat>
<stat pass="1" fail="0">3-4-4 Ensure default zone is set </stat>
<stat pass="1" fail="0">3-4-5 Ensure network interfaces are assigned to appropriate zone</stat>
<stat pass="1" fail="0">3-4-6 Ensure iptables is not enabled </stat>
<stat pass="1" fail="0">3-4-7 Ensure a table exists </stat>
<stat pass="1" fail="0">3-4-8 Ensure nftables service is enabled </stat>
<stat pass="1" fail="0">3-5 Ensure wireless interfaces are disabled </stat>
<stat pass="1" fail="0">3-6 Disable IPv6</stat>
<stat pass="1" fail="0">4-1-10 Ensure events that modify date and time information are collected </stat>
<stat pass="1" fail="0">4-1-11 Ensure events that modify the system Mandatory Access Controls are collected </stat>
<stat pass="1" fail="0">4-1-12 Ensure events that modify the system network environment are collected </stat>
<stat pass="1" fail="0">4-1-13 Ensure discretionary access control permission modification are collected </stat>
<stat pass="1" fail="0">4-1-14 Ensure events that modify user/group information are collected </stat>
<stat pass="1" fail="0">4-1-15 Ensure successful file system mounts are collected </stat>
<stat pass="1" fail="0">4-1-16 Ensure file deletion events by users are collected </stat>
<stat pass="1" fail="0">4-1-17 Ensure kernel module loading and unloading is collected </stat>
<stat pass="1" fail="0">4-1-1 Ensure auditd is installed </stat>
<stat pass="1" fail="0">4-1-2 Ensure auditd service is enabled </stat>
<stat pass="1" fail="0">4-1-3 Ensure auditing for processes that start prior to auditd is enabled </stat>
<stat pass="1" fail="0">4-1-4 Ensure audit log storage size is configured </stat>
<stat pass="1" fail="0">4-1-5 Ensure audit logs are not automatically deleted </stat>
<stat pass="1" fail="0">4-1-6 Ensure system is disabled when audit logs are full </stat>
<stat pass="1" fail="0">4-1-7 Ensure changes to system administration scope is collected</stat>
<stat pass="1" fail="0">4-1-8 Ensure login and logout events are collected </stat>
<stat pass="1" fail="0">4-1-9 Ensure session initiation information is collected </stat>
<stat pass="1" fail="0">4-2-1 Ensure rsyslog is installed </stat>
<stat pass="1" fail="0">4-2-2 Ensure rsyslog Service is enabled</stat>
<stat pass="1" fail="0">5-1-1 Ensure permissions on /etc/ssh/sshd_config are configured</stat>
<stat pass="1" fail="0">5-1-2 Ensure SSH LogLevel is appropriate</stat>
<stat pass="1" fail="0">5-1-3 Ensure SSH X11 forwarding is disabled</stat>
<stat pass="1" fail="0">5-1-4 Ensure SSH MaxAuthTries is set to 4 or less</stat>
<stat pass="1" fail="0">5-1-5 Ensure SSH IgnoreRhosts is enabled</stat>
<stat pass="1" fail="0">5-1-6 Ensure SSH PermitEmptyPasswords is disabled</stat>
<stat pass="1" fail="0">5-1-7 Ensure SSH LoginGraceTime is set to one minute or less</stat>
<stat pass="1" fail="0">5-1-8 Ensure SSH AllowTcpForwarding is disabled</stat>
<stat pass="1" fail="0">5-1-9 Ensure SSH MaxSessions is set to 4 or less </stat>
<stat pass="1" fail="0">5-2-1 Ensure password expiration is 365 days or less</stat>
<stat pass="1" fail="0">5-2-2 Ensure password expiration warning days is 7 or more</stat>
<stat pass="1" fail="0">5-2-3 Ensure default group for the root account is GID 0</stat>
<stat pass="1" fail="0">6-1-1 Ensure permissions on /etc/passwd are configured</stat>
<stat pass="1" fail="0">6-1-2 Ensure permissions on /etc/shadow are configured</stat>
<stat pass="1" fail="0">6-1-3 Ensure permissions on /etc/group are configured</stat>
<stat pass="1" fail="0">6-1-4 Ensure permissions on /etc/gshadow are configured </stat>
<stat pass="1" fail="0">Email notification</stat>
<stat pass="1" fail="0">Integrity Proof</stat>
</tag>
<suite>
<stat pass="117" fail="0" id="s1" name="IS2 Robot Template CentOS-v2.0">IS2 Robot Template CentOS-v2.0</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
